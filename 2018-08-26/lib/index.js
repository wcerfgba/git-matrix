// @flow
var ChangesObjectStream, GIT_LOG_SPAWN_ARGS, UserFileChangeCountMatrix, createReadStream, createWriteStream, main, matrixToHtml, spawn, yargs;

yargs = require('yargs');

({createReadStream, createWriteStream} = require('fs'));

({spawn} = require('child_process'));

ChangesObjectStream = require('./ChangesObjectStream');

UserFileChangeCountMatrix = require('./UserFileChangeCountMatrix');

({matrixToHtml} = require('./renderMatrix'));

GIT_LOG_SPAWN_ARGS = [
  'git',
  ['--no-pager',
  'log',
  '--format=%n%n%ct %ae',
  '--numstat',
  '--no-merges',
  '--no-renames'],
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

main = async() => {
  var argv, commits, end, html, input, matrix, output;
  argv = yargs.option('i', {
    alias: 'input',
    describe: "Filename of input git log output. If not specified we execute the command in the working directory and pipe in the output.",
    type: 'string'
  }).option('o', {
    alias: 'output',
    describe: "Output filename. If not specified, we pipe to stdout.",
    type: 'string'
  }).argv;
  if (argv.i) {
    input = createReadStream(argv.i);
  }
  if (!argv.i) {
    input = (spawn(...GIT_LOG_SPAWN_ARGS)).stdout;
  }
  commits = new ChangesObjectStream;
  input.pipe(commits);
  matrix = new UserFileChangeCountMatrix;
  end = new Promise((resolve, reject) => {
    commits.on('data', matrix.addCommit);
    return input.on('end', resolve);
  });
  await end;
  matrix.sort();
  html = matrixToHtml(matrix);
  if (argv.o) {
    output = createWriteStream(argv.o);
  }
  if (!argv.o) {
    output = process.stdout;
  }
  output.write(html);
  if (argv.o) {
    return output.destroy();
  }
};

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbInNyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFBLG1CQUFBLEVBQUEsa0JBQUEsRUFBQSx5QkFBQSxFQUFBLGdCQUFBLEVBQUEsaUJBQUEsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQTs7QUFFQSxLQUFBLEdBQVEsT0FBQSxDQUFRLE9BQVI7O0FBQ1IsQ0FBQSxDQUFFLGdCQUFGLEVBQW9CLGlCQUFwQixDQUFBLEdBQTBDLE9BQUEsQ0FBUSxJQUFSLENBQTFDOztBQUNBLENBQUEsQ0FBRSxLQUFGLENBQUEsR0FBWSxPQUFBLENBQVEsZUFBUixDQUFaOztBQUNBLG1CQUFBLEdBQXNCLE9BQUEsQ0FBUSx1QkFBUjs7QUFDdEIseUJBQUEsR0FBNEIsT0FBQSxDQUFRLDZCQUFSOztBQUM1QixDQUFBLENBQUUsWUFBRixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxnQkFBUixDQUFuQjs7QUFFQSxrQkFBQSxHQUFxQjtFQUNuQixLQURtQjtFQUVuQixDQUFDLFlBQUQ7RUFBZSxLQUFmO0VBQXNCLHNCQUF0QjtFQUE4QyxXQUE5QztFQUEyRCxhQUEzRDtFQUEwRSxjQUExRSxDQUZtQjtFQUduQjtJQUFFLEdBQUEsRUFBSztNQUFFLEdBQUcsT0FBTyxDQUFDLEdBQWI7TUFBa0IsU0FBQSxFQUFXO0lBQTdCO0VBQVAsQ0FIbUI7OztBQU1yQixJQUFBLEdBQU8sS0FBQSxDQUFBLENBQUEsR0FBQTtBQUNMLE1BQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUE7RUFBQSxJQUFBLEdBQU8sS0FDTCxDQUFDLE1BREksQ0FDRyxHQURILEVBQ1E7SUFDWCxLQUFBLEVBQU8sT0FESTtJQUVYLFFBQUEsRUFBVSw0SEFGQztJQUdYLElBQUEsRUFBTTtFQUhLLENBRFIsQ0FNTCxDQUFDLE1BTkksQ0FNRyxHQU5ILEVBTVE7SUFDWCxLQUFBLEVBQU8sUUFESTtJQUVYLFFBQUEsRUFBVSx1REFGQztJQUdYLElBQUEsRUFBTTtFQUhLLENBTlIsQ0FXTCxDQUFDO0VBRUgsSUFBbUMsSUFBSSxDQUFDLENBQXhDO0lBQUEsS0FBQSxHQUFRLGdCQUFBLENBQWlCLElBQUksQ0FBQyxDQUF0QixFQUFSOztFQUNBLElBQUEsQ0FBb0QsSUFBSSxDQUFDLENBQXpEO0lBQUEsS0FBQSxHQUFRLENBQUMsS0FBQSxDQUFNLEdBQUcsa0JBQVQsQ0FBRCxDQUE2QixDQUFDLE9BQXRDOztFQUVBLE9BQUEsR0FBVSxJQUFJO0VBQ2QsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYO0VBRUEsTUFBQSxHQUFTLElBQUk7RUFFYixHQUFBLEdBQU0sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFBLEdBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLE1BQU0sQ0FBQyxTQUExQjtXQUNBLEtBQUssQ0FBQyxFQUFOLENBQVMsS0FBVCxFQUFnQixPQUFoQjtFQUZnQixDQUFaO0VBSU4sTUFBTTtFQUVOLE1BQU0sQ0FBQyxJQUFQLENBQUE7RUFDQSxJQUFBLEdBQU8sWUFBQSxDQUFhLE1BQWI7RUFFUCxJQUFxQyxJQUFJLENBQUMsQ0FBMUM7SUFBQSxNQUFBLEdBQVMsaUJBQUEsQ0FBa0IsSUFBSSxDQUFDLENBQXZCLEVBQVQ7O0VBQ0EsSUFBQSxDQUErQixJQUFJLENBQUMsQ0FBcEM7SUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE9BQWpCOztFQUVBLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBYjtFQUVBLElBQW9CLElBQUksQ0FBQyxDQUF6QjtXQUFBLE1BQU0sQ0FBQyxPQUFQLENBQUEsRUFBQTs7QUFwQ0s7O0FBdUNQLElBQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMgQGZsb3dcblxueWFyZ3MgPSByZXF1aXJlICd5YXJncydcbnsgY3JlYXRlUmVhZFN0cmVhbSwgY3JlYXRlV3JpdGVTdHJlYW0gfSA9IHJlcXVpcmUgJ2ZzJ1xueyBzcGF3biB9ID0gcmVxdWlyZSAnY2hpbGRfcHJvY2VzcydcbkNoYW5nZXNPYmplY3RTdHJlYW0gPSByZXF1aXJlICcuL0NoYW5nZXNPYmplY3RTdHJlYW0nXG5Vc2VyRmlsZUNoYW5nZUNvdW50TWF0cml4ID0gcmVxdWlyZSAnLi9Vc2VyRmlsZUNoYW5nZUNvdW50TWF0cml4J1xueyBtYXRyaXhUb0h0bWwgfSA9IHJlcXVpcmUgJy4vcmVuZGVyTWF0cml4JyBcblxuR0lUX0xPR19TUEFXTl9BUkdTID0gW1xuICAnZ2l0JyxcbiAgWyctLW5vLXBhZ2VyJywgJ2xvZycsICctLWZvcm1hdD0lbiVuJWN0ICVhZScsICctLW51bXN0YXQnLCAnLS1uby1tZXJnZXMnLCAnLS1uby1yZW5hbWVzJ10sXG4gIHsgZW52OiB7IC4uLnByb2Nlc3MuZW52LCBHSVRfRkxVU0g6IDAgfSB9XG5dXG5cbm1haW4gPSAoKSA9PlxuICBhcmd2ID0geWFyZ3NcbiAgICAub3B0aW9uICdpJywge1xuICAgICAgYWxpYXM6ICdpbnB1dCdcbiAgICAgIGRlc2NyaWJlOiBcIkZpbGVuYW1lIG9mIGlucHV0IGdpdCBsb2cgb3V0cHV0LiBJZiBub3Qgc3BlY2lmaWVkIHdlIGV4ZWN1dGUgdGhlIGNvbW1hbmQgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5IGFuZCBwaXBlIGluIHRoZSBvdXRwdXQuXCJcbiAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfVxuICAgIC5vcHRpb24gJ28nLCB7XG4gICAgICBhbGlhczogJ291dHB1dCdcbiAgICAgIGRlc2NyaWJlOiBcIk91dHB1dCBmaWxlbmFtZS4gSWYgbm90IHNwZWNpZmllZCwgd2UgcGlwZSB0byBzdGRvdXQuXCJcbiAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfVxuICAgIC5hcmd2XG5cbiAgaW5wdXQgPSBjcmVhdGVSZWFkU3RyZWFtIGFyZ3YuaSBpZiBhcmd2LmlcbiAgaW5wdXQgPSAoc3Bhd24gLi4uR0lUX0xPR19TUEFXTl9BUkdTKS5zdGRvdXQgdW5sZXNzIGFyZ3YuaVxuXG4gIGNvbW1pdHMgPSBuZXcgQ2hhbmdlc09iamVjdFN0cmVhbVxuICBpbnB1dC5waXBlIGNvbW1pdHNcblxuICBtYXRyaXggPSBuZXcgVXNlckZpbGVDaGFuZ2VDb3VudE1hdHJpeFxuXG4gIGVuZCA9IG5ldyBQcm9taXNlIChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgY29tbWl0cy5vbiAnZGF0YScsIG1hdHJpeC5hZGRDb21taXRcbiAgICBpbnB1dC5vbiAnZW5kJywgcmVzb2x2ZVxuXG4gIGF3YWl0IGVuZFxuXG4gIG1hdHJpeC5zb3J0KClcbiAgaHRtbCA9IG1hdHJpeFRvSHRtbCBtYXRyaXhcblxuICBvdXRwdXQgPSBjcmVhdGVXcml0ZVN0cmVhbSBhcmd2Lm8gaWYgYXJndi5vXG4gIG91dHB1dCA9IHByb2Nlc3Muc3Rkb3V0IHVubGVzcyBhcmd2Lm9cblxuICBvdXRwdXQud3JpdGUgaHRtbFxuXG4gIG91dHB1dC5kZXN0cm95KCkgaWYgYXJndi5vXG5cblxubWFpbigpIl19
//# sourceURL=/home/jpreston/Sync/proj/eyeson/2018-08-26/src/index.coffee