// @flow
var ChangeCountMatrix, ChangesObjectStream, CommitCountMatrix, GIT_LOG_SPAWN_ARGS, UnknownMatrixError, argv, createReadStream, createWriteStream, matrixToHtml, spawn, yargs;

yargs = require('yargs');

({createReadStream, createWriteStream} = require('fs'));

({spawn} = require('child_process'));

({UnknownMatrixError} = require('./errors'));

ChangesObjectStream = require('./ChangesObjectStream');

CommitCountMatrix = require('./CommitCountMatrix');

ChangeCountMatrix = require('./ChangeCountMatrix');

({matrixToHtml} = require('./renderMatrix'));

GIT_LOG_SPAWN_ARGS = [
  'git',
  ['--no-pager',
  'log',
  '--format=%n%n%ct %ae',
  '--numstat',
  '--no-merges',
  '--no-renames'],
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

argv = yargs.option('i', {
  alias: 'input',
  describe: "Filename of input git log output. If not specified we execute the command in the working directory and pipe in the output.",
  type: 'string'
}).option('o', {
  alias: 'output',
  describe: "Output filename. If not specified, we pipe to stdout.",
  type: 'string'
}).option('m', {
  alias: 'matrix',
  describe: "The function used to calculate the value for each file and user.",
  choices: ['commits', 'changes'],
  default: 'changes'
// .option 'c', {
//   alias: 'cooling'
//   describe: "Experimental cooling function where the scores in the matrix decrement over time."
//   type: 'number'
// }
}).option('l', {
  alias: 'only-log',
  describe: "Only gets the git log.",
  type: 'boolean'
}).argv;

(async() => {
  var commits, end, html, input, matrix, output;
  if (argv.input) {
    input = createReadStream(argv.input);
  }
  if (!argv.input) {
    input = (spawn(...GIT_LOG_SPAWN_ARGS)).stdout;
  }
  if (argv.output) {
    output = createWriteStream(argv.output);
  }
  if (!argv.output) {
    output = process.stdout;
  }
  if (argv['only-log']) {
    input.pipe(output);
  } else {
    commits = new ChangesObjectStream;
    input.pipe(commits);
    switch (argv.matrix) {
      case 'commits':
        matrix = CommitCountMatrix();
        break;
      case 'changes':
        matrix = ChangeCountMatrix();
        break;
      default:
        throw new UnknownMatrixError(argv.matrix);
    }
    end = new Promise((resolve, reject) => {
      commits.on('data', matrix.addCommit);
      return input.on('end', resolve);
    });
    await end;
    matrix.sort();
    html = matrixToHtml(matrix);
    output.write(html);
  }
  if (argv.output) {
    return output.destroy();
  }
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbInNyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFBLGlCQUFBLEVBQUEsbUJBQUEsRUFBQSxpQkFBQSxFQUFBLGtCQUFBLEVBQUEsa0JBQUEsRUFBQSxJQUFBLEVBQUEsZ0JBQUEsRUFBQSxpQkFBQSxFQUFBLFlBQUEsRUFBQSxLQUFBLEVBQUE7O0FBRUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztBQUNSLENBQUEsQ0FBRSxnQkFBRixFQUFvQixpQkFBcEIsQ0FBQSxHQUEwQyxPQUFBLENBQVEsSUFBUixDQUExQzs7QUFDQSxDQUFBLENBQUUsS0FBRixDQUFBLEdBQVksT0FBQSxDQUFRLGVBQVIsQ0FBWjs7QUFDQSxDQUFBLENBQUUsa0JBQUYsQ0FBQSxHQUF5QixPQUFBLENBQVEsVUFBUixDQUF6Qjs7QUFDQSxtQkFBQSxHQUFzQixPQUFBLENBQVEsdUJBQVI7O0FBQ3RCLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSxxQkFBUjs7QUFDcEIsaUJBQUEsR0FBb0IsT0FBQSxDQUFRLHFCQUFSOztBQUNwQixDQUFBLENBQUUsWUFBRixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxnQkFBUixDQUFuQjs7QUFHQSxrQkFBQSxHQUFxQjtFQUNuQixLQURtQjtFQUVuQixDQUFDLFlBQUQ7RUFBZSxLQUFmO0VBQXNCLHNCQUF0QjtFQUE4QyxXQUE5QztFQUEyRCxhQUEzRDtFQUEwRSxjQUExRSxDQUZtQjtFQUduQjtJQUFFLEdBQUEsRUFBSztNQUFFLEdBQUcsT0FBTyxDQUFDLEdBQWI7TUFBa0IsU0FBQSxFQUFXO0lBQTdCO0VBQVAsQ0FIbUI7OztBQU9yQixJQUFBLEdBQU8sS0FDTCxDQUFDLE1BREksQ0FDRyxHQURILEVBQ1E7RUFDWCxLQUFBLEVBQU8sT0FESTtFQUVYLFFBQUEsRUFBVSw0SEFGQztFQUdYLElBQUEsRUFBTTtBQUhLLENBRFIsQ0FNTCxDQUFDLE1BTkksQ0FNRyxHQU5ILEVBTVE7RUFDWCxLQUFBLEVBQU8sUUFESTtFQUVYLFFBQUEsRUFBVSx1REFGQztFQUdYLElBQUEsRUFBTTtBQUhLLENBTlIsQ0FXTCxDQUFDLE1BWEksQ0FXRyxHQVhILEVBV1E7RUFDWCxLQUFBLEVBQU8sUUFESTtFQUVYLFFBQUEsRUFBVSxrRUFGQztFQUdYLE9BQUEsRUFBUyxDQUFDLFNBQUQsRUFBWSxTQUFaLENBSEU7RUFJWCxPQUFBLEVBQVMsU0FKRTs7Ozs7O0FBQUEsQ0FYUixDQXNCTCxDQUFDLE1BdEJJLENBc0JHLEdBdEJILEVBc0JRO0VBQ1gsS0FBQSxFQUFPLFVBREk7RUFFWCxRQUFBLEVBQVUsd0JBRkM7RUFHWCxJQUFBLEVBQU07QUFISyxDQXRCUixDQTJCTCxDQUFDOztBQUVILENBQUMsS0FBQSxDQUFBLENBQUEsR0FBQTtBQUNDLE1BQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQTtFQUFBLElBQXVDLElBQUksQ0FBQyxLQUE1QztJQUFBLEtBQUEsR0FBUSxnQkFBQSxDQUFpQixJQUFJLENBQUMsS0FBdEIsRUFBUjs7RUFDQSxJQUFBLENBQW9ELElBQUksQ0FBQyxLQUF6RDtJQUFBLEtBQUEsR0FBUSxDQUFDLEtBQUEsQ0FBTSxHQUFHLGtCQUFULENBQUQsQ0FBNkIsQ0FBQyxPQUF0Qzs7RUFFQSxJQUEwQyxJQUFJLENBQUMsTUFBL0M7SUFBQSxNQUFBLEdBQVMsaUJBQUEsQ0FBa0IsSUFBSSxDQUFDLE1BQXZCLEVBQVQ7O0VBQ0EsSUFBQSxDQUErQixJQUFJLENBQUMsTUFBcEM7SUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE9BQWpCOztFQUVBLElBQUcsSUFBSyxDQUFBLFVBQUEsQ0FBUjtJQUNFLEtBQUssQ0FBQyxJQUFOLENBQVcsTUFBWCxFQURGO0dBQUEsTUFBQTtJQUdFLE9BQUEsR0FBVSxJQUFJO0lBQ2QsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYO0FBRUEsWUFBTyxJQUFJLENBQUMsTUFBWjtBQUFBLFdBQ08sU0FEUDtRQUVJLE1BQUEsR0FBUyxpQkFBQSxDQUFBO0FBRE47QUFEUCxXQUdPLFNBSFA7UUFJSSxNQUFBLEdBQVMsaUJBQUEsQ0FBQTtBQUROO0FBSFA7UUFNSSxNQUFNLElBQUksa0JBQUosQ0FBdUIsSUFBSSxDQUFDLE1BQTVCO0FBTlY7SUFRQSxHQUFBLEdBQU0sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFBLEdBQUE7TUFDaEIsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLE1BQU0sQ0FBQyxTQUExQjthQUNBLEtBQUssQ0FBQyxFQUFOLENBQVMsS0FBVCxFQUFnQixPQUFoQjtJQUZnQixDQUFaO0lBSU4sTUFBTTtJQUVOLE1BQU0sQ0FBQyxJQUFQLENBQUE7SUFDQSxJQUFBLEdBQU8sWUFBQSxDQUFhLE1BQWI7SUFFUCxNQUFNLENBQUMsS0FBUCxDQUFhLElBQWIsRUF2QkY7O0VBeUJBLElBQW9CLElBQUksQ0FBQyxNQUF6QjtXQUFBLE1BQU0sQ0FBQyxPQUFQLENBQUEsRUFBQTs7QUFoQ0QsQ0FBRCxDQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIEBmbG93XG5cbnlhcmdzID0gcmVxdWlyZSAneWFyZ3MnXG57IGNyZWF0ZVJlYWRTdHJlYW0sIGNyZWF0ZVdyaXRlU3RyZWFtIH0gPSByZXF1aXJlICdmcydcbnsgc3Bhd24gfSA9IHJlcXVpcmUgJ2NoaWxkX3Byb2Nlc3MnXG57IFVua25vd25NYXRyaXhFcnJvciB9ID0gcmVxdWlyZSAnLi9lcnJvcnMnXG5DaGFuZ2VzT2JqZWN0U3RyZWFtID0gcmVxdWlyZSAnLi9DaGFuZ2VzT2JqZWN0U3RyZWFtJ1xuQ29tbWl0Q291bnRNYXRyaXggPSByZXF1aXJlICcuL0NvbW1pdENvdW50TWF0cml4J1xuQ2hhbmdlQ291bnRNYXRyaXggPSByZXF1aXJlICcuL0NoYW5nZUNvdW50TWF0cml4J1xueyBtYXRyaXhUb0h0bWwgfSA9IHJlcXVpcmUgJy4vcmVuZGVyTWF0cml4JyBcblxuXG5HSVRfTE9HX1NQQVdOX0FSR1MgPSBbXG4gICdnaXQnLFxuICBbJy0tbm8tcGFnZXInLCAnbG9nJywgJy0tZm9ybWF0PSVuJW4lY3QgJWFlJywgJy0tbnVtc3RhdCcsICctLW5vLW1lcmdlcycsICctLW5vLXJlbmFtZXMnXSxcbiAgeyBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIEdJVF9GTFVTSDogMCB9IH1cbl1cblxuXG5hcmd2ID0geWFyZ3NcbiAgLm9wdGlvbiAnaScsIHtcbiAgICBhbGlhczogJ2lucHV0J1xuICAgIGRlc2NyaWJlOiBcIkZpbGVuYW1lIG9mIGlucHV0IGdpdCBsb2cgb3V0cHV0LiBJZiBub3Qgc3BlY2lmaWVkIHdlIGV4ZWN1dGUgdGhlIGNvbW1hbmQgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5IGFuZCBwaXBlIGluIHRoZSBvdXRwdXQuXCJcbiAgICB0eXBlOiAnc3RyaW5nJ1xuICB9XG4gIC5vcHRpb24gJ28nLCB7XG4gICAgYWxpYXM6ICdvdXRwdXQnXG4gICAgZGVzY3JpYmU6IFwiT3V0cHV0IGZpbGVuYW1lLiBJZiBub3Qgc3BlY2lmaWVkLCB3ZSBwaXBlIHRvIHN0ZG91dC5cIlxuICAgIHR5cGU6ICdzdHJpbmcnXG4gIH1cbiAgLm9wdGlvbiAnbScsIHtcbiAgICBhbGlhczogJ21hdHJpeCdcbiAgICBkZXNjcmliZTogXCJUaGUgZnVuY3Rpb24gdXNlZCB0byBjYWxjdWxhdGUgdGhlIHZhbHVlIGZvciBlYWNoIGZpbGUgYW5kIHVzZXIuXCJcbiAgICBjaG9pY2VzOiBbJ2NvbW1pdHMnLCAnY2hhbmdlcyddLFxuICAgIGRlZmF1bHQ6ICdjaGFuZ2VzJ1xuICB9XG4gICMgLm9wdGlvbiAnYycsIHtcbiAgIyAgIGFsaWFzOiAnY29vbGluZydcbiAgIyAgIGRlc2NyaWJlOiBcIkV4cGVyaW1lbnRhbCBjb29saW5nIGZ1bmN0aW9uIHdoZXJlIHRoZSBzY29yZXMgaW4gdGhlIG1hdHJpeCBkZWNyZW1lbnQgb3ZlciB0aW1lLlwiXG4gICMgICB0eXBlOiAnbnVtYmVyJ1xuICAjIH1cbiAgLm9wdGlvbiAnbCcsIHtcbiAgICBhbGlhczogJ29ubHktbG9nJyxcbiAgICBkZXNjcmliZTogXCJPbmx5IGdldHMgdGhlIGdpdCBsb2cuXCJcbiAgICB0eXBlOiAnYm9vbGVhbidcbiAgfVxuICAuYXJndlxuXG4oKCkgPT5cbiAgaW5wdXQgPSBjcmVhdGVSZWFkU3RyZWFtIGFyZ3YuaW5wdXQgaWYgYXJndi5pbnB1dFxuICBpbnB1dCA9IChzcGF3biAuLi5HSVRfTE9HX1NQQVdOX0FSR1MpLnN0ZG91dCB1bmxlc3MgYXJndi5pbnB1dFxuXG4gIG91dHB1dCA9IGNyZWF0ZVdyaXRlU3RyZWFtIGFyZ3Yub3V0cHV0IGlmIGFyZ3Yub3V0cHV0XG4gIG91dHB1dCA9IHByb2Nlc3Muc3Rkb3V0IHVubGVzcyBhcmd2Lm91dHB1dFxuXG4gIGlmIGFyZ3ZbJ29ubHktbG9nJ11cbiAgICBpbnB1dC5waXBlIG91dHB1dFxuICBlbHNlXG4gICAgY29tbWl0cyA9IG5ldyBDaGFuZ2VzT2JqZWN0U3RyZWFtXG4gICAgaW5wdXQucGlwZSBjb21taXRzXG5cbiAgICBzd2l0Y2ggYXJndi5tYXRyaXhcbiAgICAgIHdoZW4gJ2NvbW1pdHMnXG4gICAgICAgIG1hdHJpeCA9IENvbW1pdENvdW50TWF0cml4KClcbiAgICAgIHdoZW4gJ2NoYW5nZXMnXG4gICAgICAgIG1hdHJpeCA9IENoYW5nZUNvdW50TWF0cml4KClcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IFVua25vd25NYXRyaXhFcnJvciBhcmd2Lm1hdHJpeFxuXG4gICAgZW5kID0gbmV3IFByb21pc2UgKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgIGNvbW1pdHMub24gJ2RhdGEnLCBtYXRyaXguYWRkQ29tbWl0XG4gICAgICBpbnB1dC5vbiAnZW5kJywgcmVzb2x2ZVxuXG4gICAgYXdhaXQgZW5kXG5cbiAgICBtYXRyaXguc29ydCgpXG4gICAgaHRtbCA9IG1hdHJpeFRvSHRtbCBtYXRyaXhcblxuICAgIG91dHB1dC53cml0ZSBodG1sXG5cbiAgb3V0cHV0LmRlc3Ryb3koKSBpZiBhcmd2Lm91dHB1dFxuKSgpIl19
//# sourceURL=/home/jpreston/Sync/proj/eyeson/2018-08-26/src/index.coffee