// @flow
var ChangeCountMatrix, ChangesObjectStream, GIT_LOG_SPAWN_ARGS, createReadStream, createWriteStream, main, matrixToHtml, spawn, yargs;

yargs = require('yargs');

({createReadStream, createWriteStream} = require('fs'));

({spawn} = require('child_process'));

ChangesObjectStream = require('./ChangesObjectStream');

ChangeCountMatrix = require('./ChangeCountMatrix');

({matrixToHtml} = require('./renderMatrix'));

GIT_LOG_SPAWN_ARGS = [
  'git',
  ['--no-pager',
  'log',
  '--format=%n%n%ct %ae',
  '--numstat',
  '--no-merges',
  '--no-renames'],
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

main = async() => {
  var argv, commits, end, html, input, matrix, output;
  argv = yargs.option('i', {
    alias: 'input',
    describe: "Filename of input git log output. If not specified we execute the command in the working directory and pipe in the output.",
    type: 'string'
  }).option('o', {
    alias: 'output',
    describe: "Output filename. If not specified, we pipe to stdout.",
    type: 'string'
  }).argv;
  if (argv.i) {
    input = createReadStream(argv.i);
  }
  if (!argv.i) {
    input = (spawn(...GIT_LOG_SPAWN_ARGS)).stdout;
  }
  commits = new ChangesObjectStream;
  input.pipe(commits);
  matrix = ChangeCountMatrix();
  end = new Promise((resolve, reject) => {
    commits.on('data', matrix.addCommit);
    return input.on('end', resolve);
  });
  await end;
  matrix.sort();
  html = matrixToHtml(matrix);
  if (argv.o) {
    output = createWriteStream(argv.o);
  }
  if (!argv.o) {
    output = process.stdout;
  }
  output.write(html);
  if (argv.o) {
    return output.destroy();
  }
};

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbInNyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFBLGlCQUFBLEVBQUEsbUJBQUEsRUFBQSxrQkFBQSxFQUFBLGdCQUFBLEVBQUEsaUJBQUEsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQTs7QUFFQSxLQUFBLEdBQVEsT0FBQSxDQUFRLE9BQVI7O0FBQ1IsQ0FBQSxDQUFFLGdCQUFGLEVBQW9CLGlCQUFwQixDQUFBLEdBQTBDLE9BQUEsQ0FBUSxJQUFSLENBQTFDOztBQUNBLENBQUEsQ0FBRSxLQUFGLENBQUEsR0FBWSxPQUFBLENBQVEsZUFBUixDQUFaOztBQUNBLG1CQUFBLEdBQXNCLE9BQUEsQ0FBUSx1QkFBUjs7QUFDdEIsaUJBQUEsR0FBb0IsT0FBQSxDQUFRLHFCQUFSOztBQUNwQixDQUFBLENBQUUsWUFBRixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxnQkFBUixDQUFuQjs7QUFFQSxrQkFBQSxHQUFxQjtFQUNuQixLQURtQjtFQUVuQixDQUFDLFlBQUQ7RUFBZSxLQUFmO0VBQXNCLHNCQUF0QjtFQUE4QyxXQUE5QztFQUEyRCxhQUEzRDtFQUEwRSxjQUExRSxDQUZtQjtFQUduQjtJQUFFLEdBQUEsRUFBSztNQUFFLEdBQUcsT0FBTyxDQUFDLEdBQWI7TUFBa0IsU0FBQSxFQUFXO0lBQTdCO0VBQVAsQ0FIbUI7OztBQU1yQixJQUFBLEdBQU8sS0FBQSxDQUFBLENBQUEsR0FBQTtBQUNMLE1BQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUE7RUFBQSxJQUFBLEdBQU8sS0FDTCxDQUFDLE1BREksQ0FDRyxHQURILEVBQ1E7SUFDWCxLQUFBLEVBQU8sT0FESTtJQUVYLFFBQUEsRUFBVSw0SEFGQztJQUdYLElBQUEsRUFBTTtFQUhLLENBRFIsQ0FNTCxDQUFDLE1BTkksQ0FNRyxHQU5ILEVBTVE7SUFDWCxLQUFBLEVBQU8sUUFESTtJQUVYLFFBQUEsRUFBVSx1REFGQztJQUdYLElBQUEsRUFBTTtFQUhLLENBTlIsQ0FXTCxDQUFDO0VBRUgsSUFBbUMsSUFBSSxDQUFDLENBQXhDO0lBQUEsS0FBQSxHQUFRLGdCQUFBLENBQWlCLElBQUksQ0FBQyxDQUF0QixFQUFSOztFQUNBLElBQUEsQ0FBb0QsSUFBSSxDQUFDLENBQXpEO0lBQUEsS0FBQSxHQUFRLENBQUMsS0FBQSxDQUFNLEdBQUcsa0JBQVQsQ0FBRCxDQUE2QixDQUFDLE9BQXRDOztFQUVBLE9BQUEsR0FBVSxJQUFJO0VBQ2QsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYO0VBRUEsTUFBQSxHQUFTLGlCQUFBLENBQUE7RUFFVCxHQUFBLEdBQU0sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFBLEdBQUE7SUFDaEIsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLE1BQU0sQ0FBQyxTQUExQjtXQUNBLEtBQUssQ0FBQyxFQUFOLENBQVMsS0FBVCxFQUFnQixPQUFoQjtFQUZnQixDQUFaO0VBSU4sTUFBTTtFQUVOLE1BQU0sQ0FBQyxJQUFQLENBQUE7RUFDQSxJQUFBLEdBQU8sWUFBQSxDQUFhLE1BQWI7RUFFUCxJQUFxQyxJQUFJLENBQUMsQ0FBMUM7SUFBQSxNQUFBLEdBQVMsaUJBQUEsQ0FBa0IsSUFBSSxDQUFDLENBQXZCLEVBQVQ7O0VBQ0EsSUFBQSxDQUErQixJQUFJLENBQUMsQ0FBcEM7SUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE9BQWpCOztFQUVBLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBYjtFQUVBLElBQW9CLElBQUksQ0FBQyxDQUF6QjtXQUFBLE1BQU0sQ0FBQyxPQUFQLENBQUEsRUFBQTs7QUFwQ0s7O0FBdUNQLElBQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMgQGZsb3dcblxueWFyZ3MgPSByZXF1aXJlICd5YXJncydcbnsgY3JlYXRlUmVhZFN0cmVhbSwgY3JlYXRlV3JpdGVTdHJlYW0gfSA9IHJlcXVpcmUgJ2ZzJ1xueyBzcGF3biB9ID0gcmVxdWlyZSAnY2hpbGRfcHJvY2VzcydcbkNoYW5nZXNPYmplY3RTdHJlYW0gPSByZXF1aXJlICcuL0NoYW5nZXNPYmplY3RTdHJlYW0nXG5DaGFuZ2VDb3VudE1hdHJpeCA9IHJlcXVpcmUgJy4vQ2hhbmdlQ291bnRNYXRyaXgnXG57IG1hdHJpeFRvSHRtbCB9ID0gcmVxdWlyZSAnLi9yZW5kZXJNYXRyaXgnIFxuXG5HSVRfTE9HX1NQQVdOX0FSR1MgPSBbXG4gICdnaXQnLFxuICBbJy0tbm8tcGFnZXInLCAnbG9nJywgJy0tZm9ybWF0PSVuJW4lY3QgJWFlJywgJy0tbnVtc3RhdCcsICctLW5vLW1lcmdlcycsICctLW5vLXJlbmFtZXMnXSxcbiAgeyBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIEdJVF9GTFVTSDogMCB9IH1cbl1cblxubWFpbiA9ICgpID0+XG4gIGFyZ3YgPSB5YXJnc1xuICAgIC5vcHRpb24gJ2knLCB7XG4gICAgICBhbGlhczogJ2lucHV0J1xuICAgICAgZGVzY3JpYmU6IFwiRmlsZW5hbWUgb2YgaW5wdXQgZ2l0IGxvZyBvdXRwdXQuIElmIG5vdCBzcGVjaWZpZWQgd2UgZXhlY3V0ZSB0aGUgY29tbWFuZCBpbiB0aGUgd29ya2luZyBkaXJlY3RvcnkgYW5kIHBpcGUgaW4gdGhlIG91dHB1dC5cIlxuICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9XG4gICAgLm9wdGlvbiAnbycsIHtcbiAgICAgIGFsaWFzOiAnb3V0cHV0J1xuICAgICAgZGVzY3JpYmU6IFwiT3V0cHV0IGZpbGVuYW1lLiBJZiBub3Qgc3BlY2lmaWVkLCB3ZSBwaXBlIHRvIHN0ZG91dC5cIlxuICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9XG4gICAgLmFyZ3ZcblxuICBpbnB1dCA9IGNyZWF0ZVJlYWRTdHJlYW0gYXJndi5pIGlmIGFyZ3YuaVxuICBpbnB1dCA9IChzcGF3biAuLi5HSVRfTE9HX1NQQVdOX0FSR1MpLnN0ZG91dCB1bmxlc3MgYXJndi5pXG5cbiAgY29tbWl0cyA9IG5ldyBDaGFuZ2VzT2JqZWN0U3RyZWFtXG4gIGlucHV0LnBpcGUgY29tbWl0c1xuXG4gIG1hdHJpeCA9IENoYW5nZUNvdW50TWF0cml4KClcblxuICBlbmQgPSBuZXcgUHJvbWlzZSAocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgIGNvbW1pdHMub24gJ2RhdGEnLCBtYXRyaXguYWRkQ29tbWl0XG4gICAgaW5wdXQub24gJ2VuZCcsIHJlc29sdmVcblxuICBhd2FpdCBlbmRcblxuICBtYXRyaXguc29ydCgpXG4gIGh0bWwgPSBtYXRyaXhUb0h0bWwgbWF0cml4XG5cbiAgb3V0cHV0ID0gY3JlYXRlV3JpdGVTdHJlYW0gYXJndi5vIGlmIGFyZ3Yub1xuICBvdXRwdXQgPSBwcm9jZXNzLnN0ZG91dCB1bmxlc3MgYXJndi5vXG5cbiAgb3V0cHV0LndyaXRlIGh0bWxcblxuICBvdXRwdXQuZGVzdHJveSgpIGlmIGFyZ3Yub1xuXG5cbm1haW4oKSJdfQ==
//# sourceURL=/home/jpreston/Sync/proj/eyeson/2018-08-26/src/index.coffee