// @flow
/*::
type Commit = {
time: number,
email: string,
files: Array<{
  name: string,
  added: number,
  deleted: number
}>
}
*/
var ChangesObjectStream, Transform, UserFileChangeCountMatrix, compact, debug, difference, elMap, inspect, isEmpty, last, main, matchCommitHeader, matrixToHtml, parseCommitChanges, sortBy, spawn, trim, union;

({Transform} = require('stream'));

({spawn} = require('child_process'));

({compact, last, difference, isEmpty, trim, union, sortBy} = require('lodash'));

({inspect} = require('util'));

debug = (...xs) => {
  return console.debug(inspect(xs, {
    depth: null
  }));
};

matchCommitHeader = (str)/*: ?Commit */ => {
  var matches;
  matches = str.match(/^(\d+) (.*@.*)$/);
  if (!matches) {
    return null;
  }
  return {
    time: Number(matches[1]),
    email: matches[2],
    files: []
  };
};

parseCommitChanges = (lines) => {
  return lines.map((line) => {
    var parts;
    parts = line.split('\t');
    return {
      added: Number(parts[0]),
      deleted: Number(parts[1]),
      name: parts[2]
    };
  });
};

ChangesObjectStream = class ChangesObjectStream extends Transform {
  /*::
  lastCommit: ?Commit
  */
  constructor() {
    super({
      objectMode: true
    });
    this.lastCommit = null;
  }

  _transform(chunk/*: Buffer | string */)/*: void */ {
    var commitObjects, rawCommits;
    chunk = chunk.toString();
    rawCommits = chunk.split('\n\n\n');
    rawCommits = compact(rawCommits);
    rawCommits = rawCommits.map(trim);
    commitObjects = rawCommits.reduce((commits, raw) => {
      var changedFiles, commit, lines;
      lines = compact(raw.split('\n'));
      commit = matchCommitHeader(lines[0]);
      if (commit) {
        commit.files = parseCommitChanges(lines.slice(1));
        this.lastCommit = commit;
        return [...commits, commit];
      }
      commit = this.lastCommit;
      if (commit === null) {
        throw new Error('Stream must begin at start of a commit');
      }
      changedFiles = parseCommitChanges(lines);
      changedFiles.forEach((changedFile) => {
        var existingFile;
        existingFile = commit.files.find((file) => {
          return file.name === changedFile.name;
        });
        if (existingFile) {
          existingFile.added += changedFile.added;
          return existingFile.deleted += changedFile.deleted;
        } else {
          return commit.files.push(changedFile);
        }
      });
      return commits;
    }, []);
    return commitObjects.forEach((commit) => {
      return this.push(commit);
    });
  }

};

UserFileChangeCountMatrix = class UserFileChangeCountMatrix {
  /*::
  matrix: Array<[string, Array<[string, number]>]>
  files: Array<string>
  emails: Array<string>
  */
  constructor() {
    // The matrix is a table with users along one axis and files along the other
    // axis, and the number of changed lines a user has for a file as the cell.
    // We store the matrix internally as a 2-dimensional array of size 
    // `<num users> x <num files>`, and where each entry is a key-value pair.
    // The user entry is outermost and the file entry is innermost. The user 
    // entry is of the form `[ <email>, [ <file entry> ] ]`, and the 
    // file entry is of the form `[ <filename>, <user file line change count> ]`.
    // ```
    // [
    //   [ 'user1', [
    //     [ 'file1', 0 ],
    //     [ 'file2', 3 ]
    //     [ 'file3', 0]
    //   ]],
    //   [ 'user2', [
    //     [ 'file1', 12 ],
    //     [ 'file2',  0 ],
    //     [ 'file3',  3 ]
    //   ]],
    // ]
    // ```
    this.matrix = [];
    this.files = [];
    this.emails = [];
  }

  addCommit(commit) {
    var commitFileNames, user, userFiles;
    this.emails = union(this.emails, [commit.email]);
    commitFileNames = commit.files.map((file) => {
      return file.name;
    });
    this.files = union(this.files, commitFileNames);
    this.reshapeMatrix();
    user = this.matrix.find((u) => {
      return u[0] === commit.email;
    });
    if (!user) {
      throw new Error('Matrix did not container user');
    }
    userFiles = user[1];
    return userFiles.forEach((userFile) => {
      var commitFile;
      commitFile = commit.files.find((file) => {
        return file.name === userFile[0];
      });
      if (commitFile) {
        return userFile[1] += commitFile.added + commitFile.deleted;
      }
    });
  }

  // Ensure that we have an entry in the matrix for every email in `@emails`,
  // and ensure that every user has an entry for every file in `@files`.
  reshapeMatrix() {
    var currentEmails, newEmails;
    currentEmails = this.matrix.map((user) => {
      return user[0];
    });
    newEmails = difference(this.emails, currentEmails);
    newEmails.forEach((email) => {
      return this.matrix.push([email, []]);
    });
    return this.matrix.forEach((user) => {
      var currentFiles, files, newFiles;
      files = user[1];
      currentFiles = files.map((file) => {
        return file[0];
      });
      newFiles = difference(this.files, currentFiles);
      return newFiles.forEach((file) => {
        return files.push([file, 0]);
      });
    });
  }

  sort() {
    this.files = this.files.sort();
    this.emails = this.emails.sort();
    this.matrix = sortBy(this.matrix, (user) => {
      return user[0];
    });
    return this.matrix = this.matrix.map((user) => {
      return [
        user[0],
        sortBy(user[1],
        (file) => {
          return file[0];
        })
      ];
    });
  }

};

elMap = (xs) => {
  return (f) => {
    return (xs.map(f)).join('\n');
  };
};

matrixToHtml = (matrix/*: UserFileChangeCountMatrix */)/*: string */ => {
  var emailHeadings, emails, fileRows, users;
  emails = elMap(matrix.emails);
  emailHeadings = emails((email) => {
    return `<th scope='col'>${email}</th>`;
  });
  users = elMap(matrix.matrix);
  fileRows = users((user) => {
    var files;
    files = elMap(user[1]);
    return files((file, i) => {
      var fileCols;
      fileCols = users((user) => {
        return `<td>${user[1][i][1]}</td>`;
      });
      return `<tr>\n  <th scope='row'>${file[0]}</th>\n  ${fileCols}\n</tr>`;
    });
  });
  return `<table>\n  <tr>\n    <td></td>\n    ${emailHeadings}\n  </tr>\n  ${fileRows}\n</table>`;
};

main = async() => {
  var changesObjectStream, changesProc, changesRawStream, end, matrix;
  changesProc = spawn('git', ['--no-pager', 'log', '--format=%n%n%ct %ae', '--numstat', '--no-merges', '--no-renames'], {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  });
  changesRawStream = changesProc.stdout;
  changesObjectStream = new ChangesObjectStream;
  changesRawStream.pipe(changesObjectStream);
  matrix = new UserFileChangeCountMatrix;
  end = new Promise((resolve, reject) => {
    changesObjectStream.on('data', (commit) => {
      return matrix.addCommit(commit);
    });
    return changesProc.on('exit', () => {
      matrix.sort();
      console.log(matrixToHtml(matrix));
      return resolve();
    });
  });
  return (await end);
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/jpreston/Sync/proj/eyeson/2018-08-26/src/index.coffee