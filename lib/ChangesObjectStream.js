// @flow
var ChangesObjectStream, Transform, compact, matchCommitHeader, parseCommitChanges, trim;

({Transform} = require('stream'));

({compact, trim} = require('./util'));

matchCommitHeader = (str)/*: ?Commit */ => {
  var matches;
  matches = str.match(/^(\d+) (.*@.*)$/);
  if (!matches) {
    return null;
  }
  return {
    time: Number(matches[1]),
    email: matches[2],
    files: []
  };
};

parseCommitChanges = (lines) => {
  return lines.map((line) => {
    var parts;
    parts = line.split('\t');
    return {
      linesAdded: Number(parts[0]),
      linesDeleted: Number(parts[1]),
      name: parts[2]
    };
  });
};

ChangesObjectStream = class ChangesObjectStream extends Transform {
  /*::
  lastCommit: ?Commit
  */
  constructor() {
    super({
      objectMode: true
    });
    this.lastCommit = null;
  }

  _transform(chunk/*: Buffer | string */)/*: void */ {
    var commitObjects, rawCommits;
    chunk = chunk.toString();
    rawCommits = chunk.split('\n\n\n');
    rawCommits = compact(rawCommits);
    rawCommits = rawCommits.map(trim);
    commitObjects = rawCommits.reduce((commits, raw) => {
      var changedFiles, commit, lines;
      lines = compact(raw.split('\n'));
      commit = matchCommitHeader(lines[0]);
      if (commit) {
        commit.files = parseCommitChanges(lines.slice(1));
        this.lastCommit = commit;
        return [...commits, commit];
      }
      commit = this.lastCommit;
      if (commit === null) {
        throw new Error('Stream must begin at start of a commit');
      }
      changedFiles = parseCommitChanges(lines);
      changedFiles.forEach((changedFile) => {
        var existingFile;
        existingFile = commit.files.find((file) => {
          return file.name === changedFile.name;
        });
        if (existingFile) {
          existingFile.linesAdded += changedFile.linesAdded;
          return existingFile.linesDeleted += changedFile.linesDeleted;
        } else {
          return commit.files.push(changedFile);
        }
      });
      return commits;
    }, []);
    return commitObjects.forEach((commit) => {
      return this.push(commit);
    });
  }

};

module.exports = ChangesObjectStream;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlc09iamVjdFN0cmVhbS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsic3JjL0NoYW5nZXNPYmplY3RTdHJlYW0uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsSUFBQSxtQkFBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsaUJBQUEsRUFBQSxrQkFBQSxFQUFBOztBQUVBLENBQUEsQ0FBRSxTQUFGLENBQUEsR0FBZ0IsT0FBQSxDQUFRLFFBQVIsQ0FBaEI7O0FBQ0EsQ0FBQSxDQUFFLE9BQUYsRUFBVyxJQUFYLENBQUEsR0FBb0IsT0FBQSxDQUFRLFFBQVIsQ0FBcEI7O0FBRUEsaUJBQUEsR0FBb0IsQ0FBQyxHQUFELGVBQUEsR0FBQTtBQUNsQixNQUFBO0VBQUEsT0FBQSxHQUFVLEdBQUcsQ0FBQyxLQUFKLENBQVUsaUJBQVY7RUFDVixJQUFlLENBQUMsT0FBaEI7QUFBQSxXQUFPLEtBQVA7O1NBQ0E7SUFDRSxJQUFBLEVBQU0sTUFBQSxDQUFPLE9BQVEsQ0FBQSxDQUFBLENBQWYsQ0FEUjtJQUVFLEtBQUEsRUFBTyxPQUFRLENBQUEsQ0FBQSxDQUZqQjtJQUdFLEtBQUEsRUFBTztFQUhUO0FBSGtCOztBQVNwQixrQkFBQSxHQUFxQixDQUFDLEtBQUQsQ0FBQSxHQUFBO1NBQ25CLEtBQUssQ0FBQyxHQUFOLENBQVUsQ0FBQyxJQUFELENBQUEsR0FBQTtBQUNSLFFBQUE7SUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYO1dBQ1I7TUFDRSxVQUFBLEVBQVksTUFBQSxDQUFPLEtBQU0sQ0FBQSxDQUFBLENBQWIsQ0FEZDtNQUVFLFlBQUEsRUFBYyxNQUFBLENBQU8sS0FBTSxDQUFBLENBQUEsQ0FBYixDQUZoQjtNQUdFLElBQUEsRUFBTSxLQUFNLENBQUEsQ0FBQTtJQUhkO0VBRlEsQ0FBVjtBQURtQjs7QUFTZixzQkFBTixNQUFBLG9CQUFBLFFBQWtDLFVBQWxDLENBQUE7Ozs7RUFLRSxXQUFhLENBQUEsQ0FBQTtTQUNYLENBQU07TUFBRSxVQUFBLEVBQVk7SUFBZCxDQUFOO0lBQ0EsSUFBQyxDQUFBLFVBQUQsR0FBYztFQUZIOztFQUliLFVBQVksQ0FBQywyQkFBRCxZQUFBO0FBQ1YsUUFBQSxhQUFBLEVBQUE7SUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLFFBQU4sQ0FBQTtJQUNSLFVBQUEsR0FBYSxLQUFLLENBQUMsS0FBTixDQUFZLFFBQVo7SUFDYixVQUFBLEdBQWEsT0FBQSxDQUFRLFVBQVI7SUFDYixVQUFBLEdBQWEsVUFBVSxDQUFDLEdBQVgsQ0FBZSxJQUFmO0lBQ2IsYUFBQSxHQUFnQixVQUFVLENBQUMsTUFBWCxDQUFrQixDQUFDLE9BQUQsRUFBVSxHQUFWLENBQUEsR0FBQTtBQUNoQyxVQUFBLFlBQUEsRUFBQSxNQUFBLEVBQUE7TUFBQSxLQUFBLEdBQVEsT0FBQSxDQUFRLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVixDQUFSO01BQ1IsTUFBQSxHQUFTLGlCQUFBLENBQWtCLEtBQU0sQ0FBQSxDQUFBLENBQXhCO01BQ1QsSUFBRyxNQUFIO1FBQ0UsTUFBTSxDQUFDLEtBQVAsR0FBZSxrQkFBQSxDQUFtQixLQUFLLENBQUMsS0FBTixDQUFZLENBQVosQ0FBbkI7UUFDZixJQUFDLENBQUEsVUFBRCxHQUFjO0FBQ2QsZUFBTyxDQUNMLEdBQUcsT0FERSxFQUVMLE1BRkssRUFIVDs7TUFPQSxNQUFBLEdBQVMsSUFBQyxDQUFBO01BQ1YsSUFBNEQsTUFBQSxLQUFVLElBQXRFO1FBQUEsTUFBTSxJQUFJLEtBQUosQ0FBVSx3Q0FBVixFQUFOOztNQUNBLFlBQUEsR0FBZSxrQkFBQSxDQUFtQixLQUFuQjtNQUNmLFlBQVksQ0FBQyxPQUFiLENBQXFCLENBQUMsV0FBRCxDQUFBLEdBQUE7QUFDbkIsWUFBQTtRQUFBLFlBQUEsR0FBZSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQWIsQ0FBa0IsQ0FBQyxJQUFELENBQUEsR0FBQTtpQkFBVSxJQUFJLENBQUMsSUFBTCxLQUFhLFdBQVcsQ0FBQztRQUFuQyxDQUFsQjtRQUNmLElBQUcsWUFBSDtVQUNFLFlBQVksQ0FBQyxVQUFiLElBQTJCLFdBQVcsQ0FBQztpQkFDdkMsWUFBWSxDQUFDLFlBQWIsSUFBNkIsV0FBVyxDQUFDLGFBRjNDO1NBQUEsTUFBQTtpQkFJRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQWIsQ0FBa0IsV0FBbEIsRUFKRjs7TUFGbUIsQ0FBckI7YUFPQTtJQXBCZ0MsQ0FBbEIsRUFxQmQsRUFyQmM7V0FzQmhCLGFBQWEsQ0FBQyxPQUFkLENBQXNCLENBQUMsTUFBRCxDQUFBLEdBQUE7YUFBWSxJQUFDLENBQUEsSUFBRCxDQUFNLE1BQU47SUFBWixDQUF0QjtFQTNCVTs7QUFUZDs7QUF1Q0EsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIEBmbG93XG5cbnsgVHJhbnNmb3JtIH0gPSByZXF1aXJlICdzdHJlYW0nXG57IGNvbXBhY3QsIHRyaW0gfSA9IHJlcXVpcmUgJy4vdXRpbCdcblxubWF0Y2hDb21taXRIZWFkZXIgPSAoc3RyKSAjIyM6ID9Db21taXQgIyMjID0+XG4gIG1hdGNoZXMgPSBzdHIubWF0Y2goL14oXFxkKykgKC4qQC4qKSQvKVxuICByZXR1cm4gbnVsbCBpZiAhbWF0Y2hlc1xuICB7XG4gICAgdGltZTogTnVtYmVyIG1hdGNoZXNbMV1cbiAgICBlbWFpbDogbWF0Y2hlc1syXVxuICAgIGZpbGVzOiBbXVxuICB9XG5cbnBhcnNlQ29tbWl0Q2hhbmdlcyA9IChsaW5lcykgPT5cbiAgbGluZXMubWFwIChsaW5lKSA9PlxuICAgIHBhcnRzID0gbGluZS5zcGxpdCAnXFx0J1xuICAgIHtcbiAgICAgIGxpbmVzQWRkZWQ6IE51bWJlciBwYXJ0c1swXVxuICAgICAgbGluZXNEZWxldGVkOiBOdW1iZXIgcGFydHNbMV1cbiAgICAgIG5hbWU6IHBhcnRzWzJdXG4gICAgfVxuXG5jbGFzcyBDaGFuZ2VzT2JqZWN0U3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtXG4gICMjIzo6XG4gIGxhc3RDb21taXQ6ID9Db21taXRcbiAgIyMjXG5cbiAgY29uc3RydWN0b3I6ICgpIC0+XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pXG4gICAgQGxhc3RDb21taXQgPSBudWxsXG5cbiAgX3RyYW5zZm9ybTogKGNodW5rICMjIzogQnVmZmVyIHwgc3RyaW5nICMjIykgIyMjOiB2b2lkICMjIyAtPlxuICAgIGNodW5rID0gY2h1bmsudG9TdHJpbmcoKVxuICAgIHJhd0NvbW1pdHMgPSBjaHVuay5zcGxpdCAnXFxuXFxuXFxuJ1xuICAgIHJhd0NvbW1pdHMgPSBjb21wYWN0IHJhd0NvbW1pdHNcbiAgICByYXdDb21taXRzID0gcmF3Q29tbWl0cy5tYXAgdHJpbVxuICAgIGNvbW1pdE9iamVjdHMgPSByYXdDb21taXRzLnJlZHVjZSAoY29tbWl0cywgcmF3KSA9PlxuICAgICAgbGluZXMgPSBjb21wYWN0IHJhdy5zcGxpdCAnXFxuJ1xuICAgICAgY29tbWl0ID0gbWF0Y2hDb21taXRIZWFkZXIgbGluZXNbMF1cbiAgICAgIGlmIGNvbW1pdFxuICAgICAgICBjb21taXQuZmlsZXMgPSBwYXJzZUNvbW1pdENoYW5nZXMgbGluZXMuc2xpY2UgMVxuICAgICAgICBAbGFzdENvbW1pdCA9IGNvbW1pdFxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIC4uLmNvbW1pdHMsXG4gICAgICAgICAgY29tbWl0XG4gICAgICAgIF1cbiAgICAgIGNvbW1pdCA9IEBsYXN0Q29tbWl0XG4gICAgICB0aHJvdyBuZXcgRXJyb3IgJ1N0cmVhbSBtdXN0IGJlZ2luIGF0IHN0YXJ0IG9mIGEgY29tbWl0JyBpZiBjb21taXQgPT0gbnVsbFxuICAgICAgY2hhbmdlZEZpbGVzID0gcGFyc2VDb21taXRDaGFuZ2VzIGxpbmVzXG4gICAgICBjaGFuZ2VkRmlsZXMuZm9yRWFjaCAoY2hhbmdlZEZpbGUpID0+XG4gICAgICAgIGV4aXN0aW5nRmlsZSA9IGNvbW1pdC5maWxlcy5maW5kIChmaWxlKSA9PiBmaWxlLm5hbWUgPT0gY2hhbmdlZEZpbGUubmFtZVxuICAgICAgICBpZiBleGlzdGluZ0ZpbGVcbiAgICAgICAgICBleGlzdGluZ0ZpbGUubGluZXNBZGRlZCArPSBjaGFuZ2VkRmlsZS5saW5lc0FkZGVkXG4gICAgICAgICAgZXhpc3RpbmdGaWxlLmxpbmVzRGVsZXRlZCArPSBjaGFuZ2VkRmlsZS5saW5lc0RlbGV0ZWRcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGNvbW1pdC5maWxlcy5wdXNoIGNoYW5nZWRGaWxlXG4gICAgICBjb21taXRzXG4gICAgLCBbXVxuICAgIGNvbW1pdE9iamVjdHMuZm9yRWFjaCAoY29tbWl0KSA9PiBAcHVzaCBjb21taXRcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5nZXNPYmplY3RTdHJlYW0iXX0=
//# sourceURL=/home/jpreston/Sync/proj/eyeson/src/ChangesObjectStream.coffee