{
  "version": 3,
  "file": "CommitMatrix.js",
  "sourceRoot": "..",
  "sources": [
    "src/CommitMatrix.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# @flow\n\n{ union, difference, sortBy } = require './util'\n\n###::\ntype Score = number\ntype FileScore = {\n  fileName: FileName,\n  score: Score\n}\ntype CommitterFileScores = {\n  email: CommitEmail,\n  fileScores: Array<FileScore>\n}\n\n// commitFile and fileScore are for the same file.\ntype CommitFileScoreReducer =\n  ({\n    commitFile: CommitFile,\n    fileScore: FileScore\n  }) => Score\n###\n\nclass CommitMatrix\n  ###::\n  matrix: Array<CommitterFileScores>\n  files: Array<FileName>\n  emails: Array<CommitEmail>\n  commitFileScoreReducer: CommitFileScoreReducer\n  ###\n\n  constructor: (commitFileScoreReducer) ->\n    @matrix = []\n    @files = []\n    @emails = []\n    @commitFileScoreReducer = commitFileScoreReducer\n  \n  addCommit: (commit ###: Commit ###) =>\n    @emails = union @emails, [commit.email]\n    commitFileNames = commit.files.map (file) => file.name\n    @files = union @files, commitFileNames\n    @reshapeMatrix()\n    committer = @matrix.find (committer) =>\n      committer.email == commit.email\n    throw new Error 'Matrix did not container committer' if !committer\n    committer.fileScores.forEach (fileScore) =>\n      commitFile = commit.files.find (file) =>\n        file.name == fileScore.fileName\n      if commitFile\n        fileScore.score =\n          @commitFileScoreReducer { commitFile, fileScore }\n\n  # Ensure that we have an entry in the matrix for every email in `@emails`,\n  # and ensure that every committer has an entry for every file in `@files`.\n  reshapeMatrix: () =>\n    currentEmails = @matrix.map (committer) => committer.email\n    newEmails = difference @emails, currentEmails\n    newEmails.forEach (email) => \n      @matrix.push { email, fileScores: [] }\n    @matrix.forEach (committer) =>\n      fileScores = committer.fileScores\n      currentFiles = fileScores.map (fileScore) => fileScore.fileName\n      newFiles = difference @files, currentFiles\n      newFiles.forEach (fileName) =>\n        fileScores.push { fileName, score: 0 }\n\n  sort: () =>\n    @files = @files.sort()\n    @emails = @emails.sort()\n    @matrix = sortBy @matrix, (committer) => committer.email\n    @matrix = @matrix.map (committer) =>\n      {\n        email: committer.email,\n        fileScores: sortBy committer.fileScores, (fileScore) => fileScore.fileName\n      }\n\nmodule.exports = CommitMatrix"
  ]
}