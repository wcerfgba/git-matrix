#!/usr/bin/env node
//!/usr/bin/env coffee
// @flow
var ChangeCountMatrix, ChangesObjectStream, CommitCountMatrix, GIT_CMD, GIT_SPAWN_CMD, Readable, UnknownMatrixError, argv, createReadStream, createWriteStream, exec, matrixToHtml, util, yargs;

yargs = require('yargs');

({Readable} = require('stream'));

({createReadStream, createWriteStream} = require('fs'));

({exec} = require('child_process'));

({UnknownMatrixError} = require('./errors'));

ChangesObjectStream = require('./ChangesObjectStream');

CommitCountMatrix = require('./CommitCountMatrix');

ChangeCountMatrix = require('./ChangeCountMatrix');

({matrixToHtml} = require('./renderMatrix'));

util = require('util');

exec = util.promisify(exec);

GIT_SPAWN_CMD = [
  'git',
  ['--no-pager',
  'log',
  '--format=%n%n%ct %ae',
  '--numstat',
  '--no-merges',
  '--no-renames'],
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

GIT_CMD = [
  'git --no-pager log --format="%n%n%ct %ae" --numstat --no-merges --no-renames',
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

argv = yargs.option('i', {
  alias: 'input',
  describe: "Filename of input git log output. If not specified we execute the command in the working directory and pipe in the output.",
  type: 'string'
}).option('o', {
  alias: 'output',
  describe: "Output filename. If '-', we pipe to stdout.",
  type: 'string',
  defaultDescription: '"git-matrix.html" unless --only-log'
}).option('m', {
  alias: 'matrix',
  describe: "The function used to calculate the value for each file and user.",
  choices: ['commits', 'changes'],
  default: 'changes'
// .option 'c', {
//   alias: 'cooling'
//   describe: "Experimental cooling function where the scores in the matrix decrement over time."
//   type: 'number'
// }
}).option('l', {
  alias: 'only-log',
  describe: "Only gets the git log. Defaults output to stdout.",
  type: 'boolean'
}).argv;

(async() => {
  var commits, end, git, html, input, inputIsGit, matrix, output, outputIsNotStdout;
  if (!argv.output) {
    if (!argv['only-log']) {
      argv.output = 'git-matrix.html';
    }
  }
  outputIsNotStdout = argv.output && argv.output !== '-';
  if (argv.input) {
    input = createReadStream(argv.input);
  } else {
    inputIsGit = true;
    git = (await exec(...GIT_CMD));
    input = new Readable;
    input.push(git.stdout);
    input.push(null);
  }
  if (outputIsNotStdout) {
    // input = git.stdout
    output = createWriteStream(argv.output);
  }
  if (!outputIsNotStdout) {
    output = process.stdout;
  }
  input.pause();
  if (argv['only-log']) {
    input.pipe(output);
    input.resume();
  } else {
    commits = new ChangesObjectStream;
    input.pipe(commits);
    switch (argv.matrix) {
      case 'commits':
        matrix = CommitCountMatrix();
        break;
      case 'changes':
        matrix = ChangeCountMatrix();
        break;
      default:
        throw new UnknownMatrixError(argv.matrix);
    }
    end = new Promise((resolve, reject) => {
      commits.on('data', (commit) => {
        // console.log commit
        return matrix.addCommit(commit);
      });
      return input.on('end', resolve);
    });
    input.resume();
    await end;
    matrix.sort();
    html = matrixToHtml(matrix);
    output.write(html);
  }
  if (outputIsNotStdout) {
    return output.destroy();
  }
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbInNyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQUEsSUFBQSxpQkFBQSxFQUFBLG1CQUFBLEVBQUEsaUJBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxrQkFBQSxFQUFBLElBQUEsRUFBQSxnQkFBQSxFQUFBLGlCQUFBLEVBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxJQUFBLEVBQUE7O0FBR0EsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztBQUNSLENBQUEsQ0FBRSxRQUFGLENBQUEsR0FBZSxPQUFBLENBQVEsUUFBUixDQUFmOztBQUNBLENBQUEsQ0FBRSxnQkFBRixFQUFvQixpQkFBcEIsQ0FBQSxHQUEwQyxPQUFBLENBQVEsSUFBUixDQUExQzs7QUFDQSxDQUFBLENBQUUsSUFBRixDQUFBLEdBQVcsT0FBQSxDQUFRLGVBQVIsQ0FBWDs7QUFDQSxDQUFBLENBQUUsa0JBQUYsQ0FBQSxHQUF5QixPQUFBLENBQVEsVUFBUixDQUF6Qjs7QUFDQSxtQkFBQSxHQUFzQixPQUFBLENBQVEsdUJBQVI7O0FBQ3RCLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSxxQkFBUjs7QUFDcEIsaUJBQUEsR0FBb0IsT0FBQSxDQUFRLHFCQUFSOztBQUNwQixDQUFBLENBQUUsWUFBRixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxnQkFBUixDQUFuQjs7QUFJQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBQ1AsSUFBQSxHQUFPLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZjs7QUFJUCxhQUFBLEdBQWdCO0VBQ2QsS0FEYztFQUVkLENBQUMsWUFBRDtFQUFlLEtBQWY7RUFBc0Isc0JBQXRCO0VBQThDLFdBQTlDO0VBQTJELGFBQTNEO0VBQTBFLGNBQTFFLENBRmM7RUFHZDtJQUFFLEdBQUEsRUFBSztNQUFFLEdBQUcsT0FBTyxDQUFDLEdBQWI7TUFBa0IsU0FBQSxFQUFXO0lBQTdCO0VBQVAsQ0FIYzs7O0FBTWhCLE9BQUEsR0FBVTtFQUNSLDhFQURRO0VBRVI7SUFBRSxHQUFBLEVBQUs7TUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFiO01BQWtCLFNBQUEsRUFBVztJQUE3QjtFQUFQLENBRlE7OztBQU1WLElBQUEsR0FBTyxLQUNMLENBQUMsTUFESSxDQUNHLEdBREgsRUFDUTtFQUNYLEtBQUEsRUFBTyxPQURJO0VBRVgsUUFBQSxFQUFVLDRIQUZDO0VBR1gsSUFBQSxFQUFNO0FBSEssQ0FEUixDQU1MLENBQUMsTUFOSSxDQU1HLEdBTkgsRUFNUTtFQUNYLEtBQUEsRUFBTyxRQURJO0VBRVgsUUFBQSxFQUFVLDZDQUZDO0VBR1gsSUFBQSxFQUFNLFFBSEs7RUFJWCxrQkFBQSxFQUFvQjtBQUpULENBTlIsQ0FZTCxDQUFDLE1BWkksQ0FZRyxHQVpILEVBWVE7RUFDWCxLQUFBLEVBQU8sUUFESTtFQUVYLFFBQUEsRUFBVSxrRUFGQztFQUdYLE9BQUEsRUFBUyxDQUFDLFNBQUQsRUFBWSxTQUFaLENBSEU7RUFJWCxPQUFBLEVBQVMsU0FKRTs7Ozs7O0FBQUEsQ0FaUixDQXVCTCxDQUFDLE1BdkJJLENBdUJHLEdBdkJILEVBdUJRO0VBQ1gsS0FBQSxFQUFPLFVBREk7RUFFWCxRQUFBLEVBQVUsbURBRkM7RUFHWCxJQUFBLEVBQU07QUFISyxDQXZCUixDQTRCTCxDQUFDOztBQUVILENBQUMsS0FBQSxDQUFBLENBQUEsR0FBQTtBQUNDLE1BQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTtFQUFBLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBVDtJQUNFLElBQUEsQ0FBdUMsSUFBSyxDQUFBLFVBQUEsQ0FBNUM7TUFBQSxJQUFJLENBQUMsTUFBTCxHQUFjLGtCQUFkO0tBREY7O0VBR0EsaUJBQUEsR0FBb0IsSUFBSSxDQUFDLE1BQUwsSUFBZSxJQUFJLENBQUMsTUFBTCxLQUFlO0VBRWxELElBQUcsSUFBSSxDQUFDLEtBQVI7SUFDRSxLQUFBLEdBQVEsZ0JBQUEsQ0FBaUIsSUFBSSxDQUFDLEtBQXRCLEVBRFY7R0FBQSxNQUFBO0lBR0UsVUFBQSxHQUFhO0lBQ2IsR0FBQSxHQUFNLENBQUEsTUFBTSxJQUFBLENBQUssR0FBRyxPQUFSLENBQU47SUFDTixLQUFBLEdBQVEsSUFBSTtJQUNaLEtBQUssQ0FBQyxJQUFOLENBQVcsR0FBRyxDQUFDLE1BQWY7SUFDQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsRUFQRjs7RUFVQSxJQUEwQyxpQkFBMUM7O0lBQUEsTUFBQSxHQUFTLGlCQUFBLENBQWtCLElBQUksQ0FBQyxNQUF2QixFQUFUOztFQUNBLElBQUEsQ0FBK0IsaUJBQS9CO0lBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxPQUFqQjs7RUFFQSxLQUFLLENBQUMsS0FBTixDQUFBO0VBRUEsSUFBRyxJQUFLLENBQUEsVUFBQSxDQUFSO0lBQ0UsS0FBSyxDQUFDLElBQU4sQ0FBVyxNQUFYO0lBQ0EsS0FBSyxDQUFDLE1BQU4sQ0FBQSxFQUZGO0dBQUEsTUFBQTtJQUlFLE9BQUEsR0FBVSxJQUFJO0lBQ2QsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYO0FBRUEsWUFBTyxJQUFJLENBQUMsTUFBWjtBQUFBLFdBQ08sU0FEUDtRQUVJLE1BQUEsR0FBUyxpQkFBQSxDQUFBO0FBRE47QUFEUCxXQUdPLFNBSFA7UUFJSSxNQUFBLEdBQVMsaUJBQUEsQ0FBQTtBQUROO0FBSFA7UUFNSSxNQUFNLElBQUksa0JBQUosQ0FBdUIsSUFBSSxDQUFDLE1BQTVCO0FBTlY7SUFRQSxHQUFBLEdBQU0sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFBLEdBQUE7TUFDaEIsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLENBQUMsTUFBRCxDQUFBLEdBQUEsRUFBQTs7ZUFFakIsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsTUFBakI7TUFGaUIsQ0FBbkI7YUFHQSxLQUFLLENBQUMsRUFBTixDQUFTLEtBQVQsRUFBZ0IsT0FBaEI7SUFKZ0IsQ0FBWjtJQU1OLEtBQUssQ0FBQyxNQUFOLENBQUE7SUFDQSxNQUFNO0lBRU4sTUFBTSxDQUFDLElBQVAsQ0FBQTtJQUNBLElBQUEsR0FBTyxZQUFBLENBQWEsTUFBYjtJQUVQLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBYixFQTNCRjs7RUE2QkEsSUFBb0IsaUJBQXBCO1dBQUEsTUFBTSxDQUFDLE9BQVAsQ0FBQSxFQUFBOztBQWxERCxDQUFELENBQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IGNvZmZlZVxuIyBAZmxvd1xuXG55YXJncyA9IHJlcXVpcmUgJ3lhcmdzJ1xueyBSZWFkYWJsZSB9ID0gcmVxdWlyZSAnc3RyZWFtJ1xueyBjcmVhdGVSZWFkU3RyZWFtLCBjcmVhdGVXcml0ZVN0cmVhbSB9ID0gcmVxdWlyZSAnZnMnXG57IGV4ZWMgfSA9IHJlcXVpcmUgJ2NoaWxkX3Byb2Nlc3MnXG57IFVua25vd25NYXRyaXhFcnJvciB9ID0gcmVxdWlyZSAnLi9lcnJvcnMnXG5DaGFuZ2VzT2JqZWN0U3RyZWFtID0gcmVxdWlyZSAnLi9DaGFuZ2VzT2JqZWN0U3RyZWFtJ1xuQ29tbWl0Q291bnRNYXRyaXggPSByZXF1aXJlICcuL0NvbW1pdENvdW50TWF0cml4J1xuQ2hhbmdlQ291bnRNYXRyaXggPSByZXF1aXJlICcuL0NoYW5nZUNvdW50TWF0cml4J1xueyBtYXRyaXhUb0h0bWwgfSA9IHJlcXVpcmUgJy4vcmVuZGVyTWF0cml4JyBcblxuXG5cbnV0aWwgPSByZXF1aXJlKCd1dGlsJylcbmV4ZWMgPSB1dGlsLnByb21pc2lmeShleGVjKVxuXG5cblxuR0lUX1NQQVdOX0NNRCA9IFtcbiAgJ2dpdCcsXG4gIFsnLS1uby1wYWdlcicsICdsb2cnLCAnLS1mb3JtYXQ9JW4lbiVjdCAlYWUnLCAnLS1udW1zdGF0JywgJy0tbm8tbWVyZ2VzJywgJy0tbm8tcmVuYW1lcyddLFxuICB7IGVudjogeyAuLi5wcm9jZXNzLmVudiwgR0lUX0ZMVVNIOiAwIH0gfVxuXVxuXG5HSVRfQ01EID0gW1xuICAnZ2l0IC0tbm8tcGFnZXIgbG9nIC0tZm9ybWF0PVwiJW4lbiVjdCAlYWVcIiAtLW51bXN0YXQgLS1uby1tZXJnZXMgLS1uby1yZW5hbWVzJyxcbiAgeyBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIEdJVF9GTFVTSDogMCB9IH1cbl1cblxuXG5hcmd2ID0geWFyZ3NcbiAgLm9wdGlvbiAnaScsIHtcbiAgICBhbGlhczogJ2lucHV0J1xuICAgIGRlc2NyaWJlOiBcIkZpbGVuYW1lIG9mIGlucHV0IGdpdCBsb2cgb3V0cHV0LiBJZiBub3Qgc3BlY2lmaWVkIHdlIGV4ZWN1dGUgdGhlIGNvbW1hbmQgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5IGFuZCBwaXBlIGluIHRoZSBvdXRwdXQuXCJcbiAgICB0eXBlOiAnc3RyaW5nJ1xuICB9XG4gIC5vcHRpb24gJ28nLCB7XG4gICAgYWxpYXM6ICdvdXRwdXQnXG4gICAgZGVzY3JpYmU6IFwiT3V0cHV0IGZpbGVuYW1lLiBJZiAnLScsIHdlIHBpcGUgdG8gc3Rkb3V0LlwiXG4gICAgdHlwZTogJ3N0cmluZydcbiAgICBkZWZhdWx0RGVzY3JpcHRpb246ICdcImdpdC1tYXRyaXguaHRtbFwiIHVubGVzcyAtLW9ubHktbG9nJ1xuICB9XG4gIC5vcHRpb24gJ20nLCB7XG4gICAgYWxpYXM6ICdtYXRyaXgnXG4gICAgZGVzY3JpYmU6IFwiVGhlIGZ1bmN0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSB2YWx1ZSBmb3IgZWFjaCBmaWxlIGFuZCB1c2VyLlwiXG4gICAgY2hvaWNlczogWydjb21taXRzJywgJ2NoYW5nZXMnXSxcbiAgICBkZWZhdWx0OiAnY2hhbmdlcydcbiAgfVxuICAjIC5vcHRpb24gJ2MnLCB7XG4gICMgICBhbGlhczogJ2Nvb2xpbmcnXG4gICMgICBkZXNjcmliZTogXCJFeHBlcmltZW50YWwgY29vbGluZyBmdW5jdGlvbiB3aGVyZSB0aGUgc2NvcmVzIGluIHRoZSBtYXRyaXggZGVjcmVtZW50IG92ZXIgdGltZS5cIlxuICAjICAgdHlwZTogJ251bWJlcidcbiAgIyB9XG4gIC5vcHRpb24gJ2wnLCB7XG4gICAgYWxpYXM6ICdvbmx5LWxvZycsXG4gICAgZGVzY3JpYmU6IFwiT25seSBnZXRzIHRoZSBnaXQgbG9nLiBEZWZhdWx0cyBvdXRwdXQgdG8gc3Rkb3V0LlwiXG4gICAgdHlwZTogJ2Jvb2xlYW4nXG4gIH1cbiAgLmFyZ3ZcblxuKCgpID0+XG4gIGlmICFhcmd2Lm91dHB1dFxuICAgIGFyZ3Yub3V0cHV0ID0gJ2dpdC1tYXRyaXguaHRtbCcgdW5sZXNzIGFyZ3ZbJ29ubHktbG9nJ11cblxuICBvdXRwdXRJc05vdFN0ZG91dCA9IGFyZ3Yub3V0cHV0ICYmIGFyZ3Yub3V0cHV0ICE9ICctJ1xuXG4gIGlmIGFyZ3YuaW5wdXRcbiAgICBpbnB1dCA9IGNyZWF0ZVJlYWRTdHJlYW0gYXJndi5pbnB1dFxuICBlbHNlXG4gICAgaW5wdXRJc0dpdCA9IHRydWVcbiAgICBnaXQgPSBhd2FpdCBleGVjIC4uLkdJVF9DTURcbiAgICBpbnB1dCA9IG5ldyBSZWFkYWJsZVxuICAgIGlucHV0LnB1c2ggZ2l0LnN0ZG91dFxuICAgIGlucHV0LnB1c2ggbnVsbFxuICAgICMgaW5wdXQgPSBnaXQuc3Rkb3V0XG5cbiAgb3V0cHV0ID0gY3JlYXRlV3JpdGVTdHJlYW0gYXJndi5vdXRwdXQgaWYgb3V0cHV0SXNOb3RTdGRvdXRcbiAgb3V0cHV0ID0gcHJvY2Vzcy5zdGRvdXQgdW5sZXNzIG91dHB1dElzTm90U3Rkb3V0XG5cbiAgaW5wdXQucGF1c2UoKVxuXG4gIGlmIGFyZ3ZbJ29ubHktbG9nJ11cbiAgICBpbnB1dC5waXBlIG91dHB1dFxuICAgIGlucHV0LnJlc3VtZSgpXG4gIGVsc2VcbiAgICBjb21taXRzID0gbmV3IENoYW5nZXNPYmplY3RTdHJlYW1cbiAgICBpbnB1dC5waXBlIGNvbW1pdHNcblxuICAgIHN3aXRjaCBhcmd2Lm1hdHJpeFxuICAgICAgd2hlbiAnY29tbWl0cydcbiAgICAgICAgbWF0cml4ID0gQ29tbWl0Q291bnRNYXRyaXgoKVxuICAgICAgd2hlbiAnY2hhbmdlcydcbiAgICAgICAgbWF0cml4ID0gQ2hhbmdlQ291bnRNYXRyaXgoKVxuICAgICAgZWxzZVxuICAgICAgICB0aHJvdyBuZXcgVW5rbm93bk1hdHJpeEVycm9yIGFyZ3YubWF0cml4XG5cbiAgICBlbmQgPSBuZXcgUHJvbWlzZSAocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgY29tbWl0cy5vbiAnZGF0YScsIChjb21taXQpID0+XG4gICAgICAgICMgY29uc29sZS5sb2cgY29tbWl0XG4gICAgICAgIG1hdHJpeC5hZGRDb21taXQgY29tbWl0XG4gICAgICBpbnB1dC5vbiAnZW5kJywgcmVzb2x2ZVxuXG4gICAgaW5wdXQucmVzdW1lKClcbiAgICBhd2FpdCBlbmRcblxuICAgIG1hdHJpeC5zb3J0KClcbiAgICBodG1sID0gbWF0cml4VG9IdG1sIG1hdHJpeFxuXG4gICAgb3V0cHV0LndyaXRlIGh0bWxcblxuICBvdXRwdXQuZGVzdHJveSgpIGlmIG91dHB1dElzTm90U3Rkb3V0XG4pKCkiXX0=
//# sourceURL=/home/jpreston/Sync/proj/eyeson/src/index.coffee