#!/usr/bin/env node
//!/usr/bin/env coffee
// @flow
var ChangeCountMatrix, ChangesObjectStream, CommitCountMatrix, GIT_LOG_SPAWN_ARGS, UnknownMatrixError, argv, createReadStream, createWriteStream, matrixToHtml, spawn, yargs;

yargs = require('yargs');

({createReadStream, createWriteStream} = require('fs'));

({spawn} = require('child_process'));

({UnknownMatrixError} = require('./errors'));

ChangesObjectStream = require('./ChangesObjectStream');

CommitCountMatrix = require('./CommitCountMatrix');

ChangeCountMatrix = require('./ChangeCountMatrix');

({matrixToHtml} = require('./renderMatrix'));

GIT_LOG_SPAWN_ARGS = [
  'git',
  ['--no-pager',
  'log',
  '--format=%n%n%ct %ae',
  '--numstat',
  '--no-merges',
  '--no-renames'],
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

argv = yargs.option('i', {
  alias: 'input',
  describe: "Filename of input git log output. If not specified we execute the command in the working directory and pipe in the output.",
  type: 'string'
}).option('o', {
  alias: 'output',
  describe: "Output filename. If '-', we pipe to stdout.",
  type: 'string',
  defaultDescription: '"git-matrix.html" unless --only-log'
}).option('m', {
  alias: 'matrix',
  describe: "The function used to calculate the value for each file and user.",
  choices: ['commits', 'changes'],
  default: 'changes'
// .option 'c', {
//   alias: 'cooling'
//   describe: "Experimental cooling function where the scores in the matrix decrement over time."
//   type: 'number'
// }
}).option('l', {
  alias: 'only-log',
  describe: "Only gets the git log. Defaults output to stdout.",
  type: 'boolean'
}).argv;

(async() => {
  var commits, end, html, input, matrix, output, outputIsNotStdout;
  if (!argv.output) {
    if (!argv['only-log']) {
      argv.output = 'git-matrix.html';
    }
  }
  outputIsNotStdout = argv.output && argv.output !== '-';
  if (argv.input) {
    input = createReadStream(argv.input);
  }
  if (!argv.input) {
    input = (spawn(...GIT_LOG_SPAWN_ARGS)).stdout;
  }
  if (outputIsNotStdout) {
    output = createWriteStream(argv.output);
  }
  if (!outputIsNotStdout) {
    output = process.stdout;
  }
  input.pause();
  if (argv['only-log']) {
    input.pipe(output);
    input.resume();
  } else {
    commits = new ChangesObjectStream;
    input.pipe(commits);
    switch (argv.matrix) {
      case 'commits':
        matrix = CommitCountMatrix();
        break;
      case 'changes':
        matrix = ChangeCountMatrix();
        break;
      default:
        throw new UnknownMatrixError(argv.matrix);
    }
    end = new Promise((resolve, reject) => {
      commits.on('data', (commit) => {
        return matrix.addCommit(commit);
      });
      return input.on('end', resolve);
    });
    input.resume();
    await end;
    matrix.sort();
    html = matrixToHtml(matrix);
    output.write(html);
  }
  if (outputIsNotStdout) {
    return output.destroy();
  }
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbInNyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQUEsSUFBQSxpQkFBQSxFQUFBLG1CQUFBLEVBQUEsaUJBQUEsRUFBQSxrQkFBQSxFQUFBLGtCQUFBLEVBQUEsSUFBQSxFQUFBLGdCQUFBLEVBQUEsaUJBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBOztBQUdBLEtBQUEsR0FBUSxPQUFBLENBQVEsT0FBUjs7QUFDUixDQUFBLENBQUUsZ0JBQUYsRUFBb0IsaUJBQXBCLENBQUEsR0FBMEMsT0FBQSxDQUFRLElBQVIsQ0FBMUM7O0FBQ0EsQ0FBQSxDQUFFLEtBQUYsQ0FBQSxHQUFZLE9BQUEsQ0FBUSxlQUFSLENBQVo7O0FBQ0EsQ0FBQSxDQUFFLGtCQUFGLENBQUEsR0FBeUIsT0FBQSxDQUFRLFVBQVIsQ0FBekI7O0FBQ0EsbUJBQUEsR0FBc0IsT0FBQSxDQUFRLHVCQUFSOztBQUN0QixpQkFBQSxHQUFvQixPQUFBLENBQVEscUJBQVI7O0FBQ3BCLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSxxQkFBUjs7QUFDcEIsQ0FBQSxDQUFFLFlBQUYsQ0FBQSxHQUFtQixPQUFBLENBQVEsZ0JBQVIsQ0FBbkI7O0FBR0Esa0JBQUEsR0FBcUI7RUFDbkIsS0FEbUI7RUFFbkIsQ0FBQyxZQUFEO0VBQWUsS0FBZjtFQUFzQixzQkFBdEI7RUFBOEMsV0FBOUM7RUFBMkQsYUFBM0Q7RUFBMEUsY0FBMUUsQ0FGbUI7RUFHbkI7SUFBRSxHQUFBLEVBQUs7TUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFiO01BQWtCLFNBQUEsRUFBVztJQUE3QjtFQUFQLENBSG1COzs7QUFPckIsSUFBQSxHQUFPLEtBQ0wsQ0FBQyxNQURJLENBQ0csR0FESCxFQUNRO0VBQ1gsS0FBQSxFQUFPLE9BREk7RUFFWCxRQUFBLEVBQVUsNEhBRkM7RUFHWCxJQUFBLEVBQU07QUFISyxDQURSLENBTUwsQ0FBQyxNQU5JLENBTUcsR0FOSCxFQU1RO0VBQ1gsS0FBQSxFQUFPLFFBREk7RUFFWCxRQUFBLEVBQVUsNkNBRkM7RUFHWCxJQUFBLEVBQU0sUUFISztFQUlYLGtCQUFBLEVBQW9CO0FBSlQsQ0FOUixDQVlMLENBQUMsTUFaSSxDQVlHLEdBWkgsRUFZUTtFQUNYLEtBQUEsRUFBTyxRQURJO0VBRVgsUUFBQSxFQUFVLGtFQUZDO0VBR1gsT0FBQSxFQUFTLENBQUMsU0FBRCxFQUFZLFNBQVosQ0FIRTtFQUlYLE9BQUEsRUFBUyxTQUpFOzs7Ozs7QUFBQSxDQVpSLENBdUJMLENBQUMsTUF2QkksQ0F1QkcsR0F2QkgsRUF1QlE7RUFDWCxLQUFBLEVBQU8sVUFESTtFQUVYLFFBQUEsRUFBVSxtREFGQztFQUdYLElBQUEsRUFBTTtBQUhLLENBdkJSLENBNEJMLENBQUM7O0FBRUgsQ0FBQyxLQUFBLENBQUEsQ0FBQSxHQUFBO0FBQ0MsTUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQTtFQUFBLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBVDtJQUNFLElBQUEsQ0FBdUMsSUFBSyxDQUFBLFVBQUEsQ0FBNUM7TUFBQSxJQUFJLENBQUMsTUFBTCxHQUFjLGtCQUFkO0tBREY7O0VBR0EsaUJBQUEsR0FBb0IsSUFBSSxDQUFDLE1BQUwsSUFBZSxJQUFJLENBQUMsTUFBTCxLQUFlO0VBRWxELElBQXVDLElBQUksQ0FBQyxLQUE1QztJQUFBLEtBQUEsR0FBUSxnQkFBQSxDQUFpQixJQUFJLENBQUMsS0FBdEIsRUFBUjs7RUFDQSxJQUFBLENBQW9ELElBQUksQ0FBQyxLQUF6RDtJQUFBLEtBQUEsR0FBUSxDQUFDLEtBQUEsQ0FBTSxHQUFHLGtCQUFULENBQUQsQ0FBNkIsQ0FBQyxPQUF0Qzs7RUFFQSxJQUEwQyxpQkFBMUM7SUFBQSxNQUFBLEdBQVMsaUJBQUEsQ0FBa0IsSUFBSSxDQUFDLE1BQXZCLEVBQVQ7O0VBQ0EsSUFBQSxDQUErQixpQkFBL0I7SUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE9BQWpCOztFQUVBLEtBQUssQ0FBQyxLQUFOLENBQUE7RUFFQSxJQUFHLElBQUssQ0FBQSxVQUFBLENBQVI7SUFDRSxLQUFLLENBQUMsSUFBTixDQUFXLE1BQVg7SUFDQSxLQUFLLENBQUMsTUFBTixDQUFBLEVBRkY7R0FBQSxNQUFBO0lBSUUsT0FBQSxHQUFVLElBQUk7SUFDZCxLQUFLLENBQUMsSUFBTixDQUFXLE9BQVg7QUFFQSxZQUFPLElBQUksQ0FBQyxNQUFaO0FBQUEsV0FDTyxTQURQO1FBRUksTUFBQSxHQUFTLGlCQUFBLENBQUE7QUFETjtBQURQLFdBR08sU0FIUDtRQUlJLE1BQUEsR0FBUyxpQkFBQSxDQUFBO0FBRE47QUFIUDtRQU1JLE1BQU0sSUFBSSxrQkFBSixDQUF1QixJQUFJLENBQUMsTUFBNUI7QUFOVjtJQVFBLEdBQUEsR0FBTSxJQUFJLE9BQUosQ0FBWSxDQUFDLE9BQUQsRUFBVSxNQUFWLENBQUEsR0FBQTtNQUNoQixPQUFPLENBQUMsRUFBUixDQUFXLE1BQVgsRUFBbUIsQ0FBQyxNQUFELENBQUEsR0FBQTtlQUNqQixNQUFNLENBQUMsU0FBUCxDQUFpQixNQUFqQjtNQURpQixDQUFuQjthQUVBLEtBQUssQ0FBQyxFQUFOLENBQVMsS0FBVCxFQUFnQixPQUFoQjtJQUhnQixDQUFaO0lBS04sS0FBSyxDQUFDLE1BQU4sQ0FBQTtJQUNBLE1BQU07SUFFTixNQUFNLENBQUMsSUFBUCxDQUFBO0lBQ0EsSUFBQSxHQUFPLFlBQUEsQ0FBYSxNQUFiO0lBRVAsTUFBTSxDQUFDLEtBQVAsQ0FBYSxJQUFiLEVBMUJGOztFQTRCQSxJQUFvQixpQkFBcEI7V0FBQSxNQUFNLENBQUMsT0FBUCxDQUFBLEVBQUE7O0FBMUNELENBQUQsQ0FBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgY29mZmVlXG4jIEBmbG93XG5cbnlhcmdzID0gcmVxdWlyZSAneWFyZ3MnXG57IGNyZWF0ZVJlYWRTdHJlYW0sIGNyZWF0ZVdyaXRlU3RyZWFtIH0gPSByZXF1aXJlICdmcydcbnsgc3Bhd24gfSA9IHJlcXVpcmUgJ2NoaWxkX3Byb2Nlc3MnXG57IFVua25vd25NYXRyaXhFcnJvciB9ID0gcmVxdWlyZSAnLi9lcnJvcnMnXG5DaGFuZ2VzT2JqZWN0U3RyZWFtID0gcmVxdWlyZSAnLi9DaGFuZ2VzT2JqZWN0U3RyZWFtJ1xuQ29tbWl0Q291bnRNYXRyaXggPSByZXF1aXJlICcuL0NvbW1pdENvdW50TWF0cml4J1xuQ2hhbmdlQ291bnRNYXRyaXggPSByZXF1aXJlICcuL0NoYW5nZUNvdW50TWF0cml4J1xueyBtYXRyaXhUb0h0bWwgfSA9IHJlcXVpcmUgJy4vcmVuZGVyTWF0cml4JyBcblxuXG5HSVRfTE9HX1NQQVdOX0FSR1MgPSBbXG4gICdnaXQnLFxuICBbJy0tbm8tcGFnZXInLCAnbG9nJywgJy0tZm9ybWF0PSVuJW4lY3QgJWFlJywgJy0tbnVtc3RhdCcsICctLW5vLW1lcmdlcycsICctLW5vLXJlbmFtZXMnXSxcbiAgeyBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIEdJVF9GTFVTSDogMCB9IH1cbl1cblxuXG5hcmd2ID0geWFyZ3NcbiAgLm9wdGlvbiAnaScsIHtcbiAgICBhbGlhczogJ2lucHV0J1xuICAgIGRlc2NyaWJlOiBcIkZpbGVuYW1lIG9mIGlucHV0IGdpdCBsb2cgb3V0cHV0LiBJZiBub3Qgc3BlY2lmaWVkIHdlIGV4ZWN1dGUgdGhlIGNvbW1hbmQgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5IGFuZCBwaXBlIGluIHRoZSBvdXRwdXQuXCJcbiAgICB0eXBlOiAnc3RyaW5nJ1xuICB9XG4gIC5vcHRpb24gJ28nLCB7XG4gICAgYWxpYXM6ICdvdXRwdXQnXG4gICAgZGVzY3JpYmU6IFwiT3V0cHV0IGZpbGVuYW1lLiBJZiAnLScsIHdlIHBpcGUgdG8gc3Rkb3V0LlwiXG4gICAgdHlwZTogJ3N0cmluZydcbiAgICBkZWZhdWx0RGVzY3JpcHRpb246ICdcImdpdC1tYXRyaXguaHRtbFwiIHVubGVzcyAtLW9ubHktbG9nJ1xuICB9XG4gIC5vcHRpb24gJ20nLCB7XG4gICAgYWxpYXM6ICdtYXRyaXgnXG4gICAgZGVzY3JpYmU6IFwiVGhlIGZ1bmN0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSB2YWx1ZSBmb3IgZWFjaCBmaWxlIGFuZCB1c2VyLlwiXG4gICAgY2hvaWNlczogWydjb21taXRzJywgJ2NoYW5nZXMnXSxcbiAgICBkZWZhdWx0OiAnY2hhbmdlcydcbiAgfVxuICAjIC5vcHRpb24gJ2MnLCB7XG4gICMgICBhbGlhczogJ2Nvb2xpbmcnXG4gICMgICBkZXNjcmliZTogXCJFeHBlcmltZW50YWwgY29vbGluZyBmdW5jdGlvbiB3aGVyZSB0aGUgc2NvcmVzIGluIHRoZSBtYXRyaXggZGVjcmVtZW50IG92ZXIgdGltZS5cIlxuICAjICAgdHlwZTogJ251bWJlcidcbiAgIyB9XG4gIC5vcHRpb24gJ2wnLCB7XG4gICAgYWxpYXM6ICdvbmx5LWxvZycsXG4gICAgZGVzY3JpYmU6IFwiT25seSBnZXRzIHRoZSBnaXQgbG9nLiBEZWZhdWx0cyBvdXRwdXQgdG8gc3Rkb3V0LlwiXG4gICAgdHlwZTogJ2Jvb2xlYW4nXG4gIH1cbiAgLmFyZ3ZcblxuKCgpID0+XG4gIGlmICFhcmd2Lm91dHB1dFxuICAgIGFyZ3Yub3V0cHV0ID0gJ2dpdC1tYXRyaXguaHRtbCcgdW5sZXNzIGFyZ3ZbJ29ubHktbG9nJ11cblxuICBvdXRwdXRJc05vdFN0ZG91dCA9IGFyZ3Yub3V0cHV0ICYmIGFyZ3Yub3V0cHV0ICE9ICctJ1xuXG4gIGlucHV0ID0gY3JlYXRlUmVhZFN0cmVhbSBhcmd2LmlucHV0IGlmIGFyZ3YuaW5wdXRcbiAgaW5wdXQgPSAoc3Bhd24gLi4uR0lUX0xPR19TUEFXTl9BUkdTKS5zdGRvdXQgdW5sZXNzIGFyZ3YuaW5wdXRcblxuICBvdXRwdXQgPSBjcmVhdGVXcml0ZVN0cmVhbSBhcmd2Lm91dHB1dCBpZiBvdXRwdXRJc05vdFN0ZG91dFxuICBvdXRwdXQgPSBwcm9jZXNzLnN0ZG91dCB1bmxlc3Mgb3V0cHV0SXNOb3RTdGRvdXRcblxuICBpbnB1dC5wYXVzZSgpXG5cbiAgaWYgYXJndlsnb25seS1sb2cnXVxuICAgIGlucHV0LnBpcGUgb3V0cHV0XG4gICAgaW5wdXQucmVzdW1lKClcbiAgZWxzZVxuICAgIGNvbW1pdHMgPSBuZXcgQ2hhbmdlc09iamVjdFN0cmVhbVxuICAgIGlucHV0LnBpcGUgY29tbWl0c1xuXG4gICAgc3dpdGNoIGFyZ3YubWF0cml4XG4gICAgICB3aGVuICdjb21taXRzJ1xuICAgICAgICBtYXRyaXggPSBDb21taXRDb3VudE1hdHJpeCgpXG4gICAgICB3aGVuICdjaGFuZ2VzJ1xuICAgICAgICBtYXRyaXggPSBDaGFuZ2VDb3VudE1hdHJpeCgpXG4gICAgICBlbHNlXG4gICAgICAgIHRocm93IG5ldyBVbmtub3duTWF0cml4RXJyb3IgYXJndi5tYXRyaXhcblxuICAgIGVuZCA9IG5ldyBQcm9taXNlIChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICBjb21taXRzLm9uICdkYXRhJywgKGNvbW1pdCkgPT5cbiAgICAgICAgbWF0cml4LmFkZENvbW1pdCBjb21taXRcbiAgICAgIGlucHV0Lm9uICdlbmQnLCByZXNvbHZlXG5cbiAgICBpbnB1dC5yZXN1bWUoKVxuICAgIGF3YWl0IGVuZFxuXG4gICAgbWF0cml4LnNvcnQoKVxuICAgIGh0bWwgPSBtYXRyaXhUb0h0bWwgbWF0cml4XG5cbiAgICBvdXRwdXQud3JpdGUgaHRtbFxuXG4gIG91dHB1dC5kZXN0cm95KCkgaWYgb3V0cHV0SXNOb3RTdGRvdXRcbikoKSJdfQ==
//# sourceURL=/home/jpreston/Sync/proj/eyeson/src/index.coffee