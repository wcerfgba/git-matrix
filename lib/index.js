#!/usr/bin/env node
//!/usr/bin/env coffee
// @flow
var ChangeCountMatrix, ChangesObjectStream, CommitCountMatrix, GIT_CMD, GIT_SPAWN_CMD, Readable, UnknownMatrixError, argv, createReadStream, createWriteStream, exec, matrixToHtml, util, yargs;

yargs = require('yargs');

({Readable} = require('stream'));

({createReadStream, createWriteStream} = require('fs'));

({exec} = require('child_process'));

({UnknownMatrixError} = require('./errors'));

ChangesObjectStream = require('./ChangesObjectStream');

CommitCountMatrix = require('./CommitCountMatrix');

ChangeCountMatrix = require('./ChangeCountMatrix');

({matrixToHtml} = require('./renderMatrix'));

util = require('util');

exec = util.promisify(exec);

GIT_SPAWN_CMD = [
  'git',
  ['--no-pager',
  'log',
  '--format=%n%n%ct %ae',
  '--numstat',
  '--no-merges',
  '--no-renames'],
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    }
  }
];

GIT_CMD = [
  'git --no-pager log --format="%n%n%ct %ae" --numstat --no-merges --no-renames',
  {
    env: {
      ...process.env,
      GIT_FLUSH: 0
    },
    maxBuffer: 2 * 1024 * 1024
  }
];

argv = yargs.option('i', {
  alias: 'input',
  describe: "Filename of input git log output. If not specified we execute the command in the working directory and pipe in the output.",
  type: 'string'
}).option('o', {
  alias: 'output',
  describe: "Output filename. If '-', we pipe to stdout.",
  type: 'string',
  defaultDescription: '"git-matrix.html" unless --only-log'
}).option('m', {
  alias: 'matrix',
  describe: "The function used to calculate the value for each file and user.",
  choices: ['commits', 'changes'],
  default: 'changes'
// .option 'c', {
//   alias: 'cooling'
//   describe: "Experimental cooling function where the scores in the matrix decrement over time."
//   type: 'number'
// }
}).option('l', {
  alias: 'only-log',
  describe: "Only gets the git log. Defaults output to stdout.",
  type: 'boolean'
}).argv;

(async() => {
  var commits, end, git, html, input, inputIsGit, matrix, output, outputIsNotStdout;
  if (!argv.output) {
    if (!argv['only-log']) {
      argv.output = 'git-matrix.html';
    }
  }
  outputIsNotStdout = argv.output && argv.output !== '-';
  if (argv.input) {
    input = createReadStream(argv.input);
  } else {
    inputIsGit = true;
    git = (await exec(...GIT_CMD));
    input = new Readable;
    input.push(git.stdout);
    input.push(null);
  }
  if (outputIsNotStdout) {
    // input = git.stdout
    output = createWriteStream(argv.output);
  }
  if (!outputIsNotStdout) {
    output = process.stdout;
  }
  input.pause();
  if (argv['only-log']) {
    input.pipe(output);
    input.resume();
  } else {
    commits = new ChangesObjectStream;
    input.pipe(commits);
    switch (argv.matrix) {
      case 'commits':
        matrix = CommitCountMatrix();
        break;
      case 'changes':
        matrix = ChangeCountMatrix();
        break;
      default:
        throw new UnknownMatrixError(argv.matrix);
    }
    end = new Promise((resolve, reject) => {
      commits.on('data', (commit) => {
        // console.log commit
        return matrix.addCommit(commit);
      });
      return input.on('end', resolve);
    });
    input.resume();
    await end;
    matrix.sort();
    html = matrixToHtml(matrix);
    output.write(html);
  }
  if (outputIsNotStdout) {
    return output.destroy();
  }
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbInNyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQUEsSUFBQSxpQkFBQSxFQUFBLG1CQUFBLEVBQUEsaUJBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxrQkFBQSxFQUFBLElBQUEsRUFBQSxnQkFBQSxFQUFBLGlCQUFBLEVBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxJQUFBLEVBQUE7O0FBR0EsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztBQUNSLENBQUEsQ0FBRSxRQUFGLENBQUEsR0FBZSxPQUFBLENBQVEsUUFBUixDQUFmOztBQUNBLENBQUEsQ0FBRSxnQkFBRixFQUFvQixpQkFBcEIsQ0FBQSxHQUEwQyxPQUFBLENBQVEsSUFBUixDQUExQzs7QUFDQSxDQUFBLENBQUUsSUFBRixDQUFBLEdBQVcsT0FBQSxDQUFRLGVBQVIsQ0FBWDs7QUFDQSxDQUFBLENBQUUsa0JBQUYsQ0FBQSxHQUF5QixPQUFBLENBQVEsVUFBUixDQUF6Qjs7QUFDQSxtQkFBQSxHQUFzQixPQUFBLENBQVEsdUJBQVI7O0FBQ3RCLGlCQUFBLEdBQW9CLE9BQUEsQ0FBUSxxQkFBUjs7QUFDcEIsaUJBQUEsR0FBb0IsT0FBQSxDQUFRLHFCQUFSOztBQUNwQixDQUFBLENBQUUsWUFBRixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxnQkFBUixDQUFuQjs7QUFJQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBQ1AsSUFBQSxHQUFPLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZjs7QUFJUCxhQUFBLEdBQWdCO0VBQ2QsS0FEYztFQUVkLENBQUMsWUFBRDtFQUFlLEtBQWY7RUFBc0Isc0JBQXRCO0VBQThDLFdBQTlDO0VBQTJELGFBQTNEO0VBQTBFLGNBQTFFLENBRmM7RUFHZDtJQUFFLEdBQUEsRUFBSztNQUFFLEdBQUcsT0FBTyxDQUFDLEdBQWI7TUFBa0IsU0FB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QUFpQixNQUFqQjtNQUZpQixDQUFuQjthQUdBLEtBQUssQ0FBQyxFQUFOLENBQVMsS0FBVCxFQUFnQixPQUFoQjtJQUpnQixDQUFaO0lBTU4sS0FBSyxDQUFDLE1BQU4sQ0FBQTtJQUNBLE1BQU07SUFFTixNQUFNLENBQUMsSUFBUCxDQUFBO0lBQ0EsSUFBQSxHQUFPLFlBQUEsQ0FBYSxNQUFiO0lBRVAsTUFBTSxDQUFDLEtBQVAsQ0FBYSxJQUFiLEVBM0JGOztFQTZCQSxJQUFvQixpQkFBcEI7V0FBQSxNQUFNLENBQUMsT0FBUCxDQUFBLEVBQUE7O0FBbERELENBQUQsQ0FBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgY29mZmVlXG4jIEBmbG93XG5cbnlhcmdzID0gcmVxdWlyZSAneWFyZ3MnXG57IFJlYWRhYmxlIH0gPSByZXF1aXJlICdzdHJlYW0nXG57IGNyZWF0ZVJlYWRTdHJlYW0sIGNyZWF0ZVdyaXRlU3RyZWFtIH0gPSByZXF1aXJlICdmcydcbnsgZXhlYyB9ID0gcmVxdWlyZSAnY2hpbGRfcHJvY2VzcydcbnsgVW5rbm93bk1hdHJpeEVycm9yIH0gPSByZXF1aXJlICcuL2Vycm9ycydcbkNoYW5nZXNPYmplY3RTdHJlYW0gPSByZXF1aXJlICcuL0NoYW5nZXNPYmplY3RTdHJlYW0nXG5Db21taXRDb3VudE1hdHJpeCA9IHJlcXVpcmUgJy4vQ29tbWl0Q291bnRNYXRyaXgnXG5DaGFuZ2VDb3VudE1hdHJpeCA9IHJlcXVpcmUgJy4vQ2hhbmdlQ291bnRNYXRyaXgnXG57IG1hdHJpeFRvSHRtbCB9ID0gcmVxdWlyZSAnLi9yZW5kZXJNYXRyaXgnIFxuXG5cblxudXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxuZXhlYyA9IHV0aWwucHJvbWlzaWZ5KGV4ZWMpXG5cblxuXG5HSVRfU1BBV05fQ01EID0gW1xuICAnZ2l0JyxcbiAgWyctLW5vLXBhZ2VyJywgJ2xvZycsICctLWZvcm1hdD0lbiVuJWN0ICVhZScsICctLW51bXN0YXQnLCAnLS1uby1tZXJnZXMnLCAnLS1uby1yZW5hbWVzJ10sXG4gIHsgZW52OiB7IC4uLnByb2Nlc3MuZW52LCBHSVRfRkxVU0g6IDAgfSB9XG5dXG5cbkdJVF9DTUQgPSBbXG4gICdnaXQgLS1uby1wYWdlciBsb2cgLS1mb3JtYXQ9XCIlbiVuJWN0ICVhZVwiIC0tbnVtc3RhdCAtLW5vLW1lcmdlcyAtLW5vLXJlbmFtZXMnLFxuICB7XG4gICAgZW52OiB7IC4uLnByb2Nlc3MuZW52LCBHSVRfRkxVU0g6IDAgfVxuICAgIG1heEJ1ZmZlcjogMiAqIDEwMjQgKiAxMDI0XG4gIH1cbl1cblxuXG5hcmd2ID0geWFyZ3NcbiAgLm9wdGlvbiAnaScsIHtcbiAgICBhbGlhczogJ2lucHV0J1xuICAgIGRlc2NyaWJlOiBcIkZpbGVuYW1lIG9mIGlucHV0IGdpdCBsb2cgb3V0cHV0LiBJZiBub3Qgc3BlY2lmaWVkIHdlIGV4ZWN1dGUgdGhlIGNvbW1hbmQgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5IGFuZCBwaXBlIGluIHRoZSBvdXRwdXQuXCJcbiAgICB0eXBlOiAnc3RyaW5nJ1xuICB9XG4gIC5vcHRpb24gJ28nLCB7XG4gICAgYWxpYXM6ICdvdXRwdXQnXG4gICAgZGVzY3JpYmU6IFwiT3V0cHV0IGZpbGVuYW1lLiBJZiAnLScsIHdlIHBpcGUgdG8gc3Rkb3V0LlwiXG4gICAgdHlwZTogJ3N0cmluZydcbiAgICBkZWZhdWx0RGVzY3JpcHRpb246ICdcImdpdC1tYXRyaXguaHRtbFwiIHVubGVzcyAtLW9ubHktbG9nJ1xuICB9XG4gIC5vcHRpb24gJ20nLCB7XG4gICAgYWxpYXM6ICdtYXRyaXgnXG4gICAgZGVzY3JpYmU6IFwiVGhlIGZ1bmN0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSB2YWx1ZSBmb3IgZWFjaCBmaWxlIGFuZCB1c2VyLlwiXG4gICAgY2hvaWNlczogWydjb21taXRzJywgJ2NoYW5nZXMnXSxcbiAgICBkZWZhdWx0OiAnY2hhbmdlcydcbiAgfVxuICAjIC5vcHRpb24gJ2MnLCB7XG4gICMgICBhbGlhczogJ2Nvb2xpbmcnXG4gICMgICBkZXNjcmliZTogXCJFeHBlcmltZW50YWwgY29vbGluZyBmdW5jdGlvbiB3aGVyZSB0aGUgc2NvcmVzIGluIHRoZSBtYXRyaXggZGVjcmVtZW50IG92ZXIgdGltZS5cIlxuICAjICAgdHlwZTogJ251bWJlcidcbiAgIyB9XG4gIC5vcHRpb24gJ2wnLCB7XG4gICAgYWxpYXM6ICdvbmx5LWxvZycsXG4gICAgZGVzY3JpYmU6IFwiT25seSBnZXRzIHRoZSBnaXQgbG9nLiBEZWZhdWx0cyBvdXRwdXQgdG8gc3Rkb3V0LlwiXG4gICAgdHlwZTogJ2Jvb2xlYW4nXG4gIH1cbiAgLmFyZ3ZcblxuKCgpID0+XG4gIGlmICFhcmd2Lm91dHB1dFxuICAgIGFyZ3Yub3V0cHV0ID0gJ2dpdC1tYXRyaXguaHRtbCcgdW5sZXNzIGFyZ3ZbJ29ubHktbG9nJ11cblxuICBvdXRwdXRJc05vdFN0ZG91dCA9IGFyZ3Yub3V0cHV0ICYmIGFyZ3Yub3V0cHV0ICE9ICctJ1xuXG4gIGlmIGFyZ3YuaW5wdXRcbiAgICBpbnB1dCA9IGNyZWF0ZVJlYWRTdHJlYW0gYXJndi5pbnB1dFxuICBlbHNlXG4gICAgaW5wdXRJc0dpdCA9IHRydWVcbiAgICBnaXQgPSBhd2FpdCBleGVjIC4uLkdJVF9DTURcbiAgICBpbnB1dCA9IG5ldyBSZWFkYWJsZVxuICAgIGlucHV0LnB1c2ggZ2l0LnN0ZG91dFxuICAgIGlucHV0LnB1c2ggbnVsbFxuICAgICMgaW5wdXQgPSBnaXQuc3Rkb3V0XG5cbiAgb3V0cHV0ID0gY3JlYXRlV3JpdGVTdHJlYW0gYXJndi5vdXRwdXQgaWYgb3V0cHV0SXNOb3RTdGRvdXRcbiAgb3V0cHV0ID0gcHJvY2Vzcy5zdGRvdXQgdW5sZXNzIG91dHB1dElzTm90U3Rkb3V0XG5cbiAgaW5wdXQucGF1c2UoKVxuXG4gIGlmIGFyZ3ZbJ29ubHktbG9nJ11cbiAgICBpbnB1dC5waXBlIG91dHB1dFxuICAgIGlucHV0LnJlc3VtZSgpXG4gIGVsc2VcbiAgICBjb21taXRzID0gbmV3IENoYW5nZXNPYmplY3RTdHJlYW1cbiAgICBpbnB1dC5waXBlIGNvbW1pdHNcblxuICAgIHN3aXRjaCBhcmd2Lm1hdHJpeFxuICAgICAgd2hlbiAnY29tbWl0cydcbiAgICAgICAgbWF0cml4ID0gQ29tbWl0Q291bnRNYXRyaXgoKVxuICAgICAgd2hlbiAnY2hhbmdlcydcbiAgICAgICAgbWF0cml4ID0gQ2hhbmdlQ291bnRNYXRyaXgoKVxuICAgICAgZWxzZVxuICAgICAgICB0aHJvdyBuZXcgVW5rbm93bk1hdHJpeEVycm9yIGFyZ3YubWF0cml4XG5cbiAgICBlbmQgPSBuZXcgUHJvbWlzZSAocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgY29tbWl0cy5vbiAnZGF0YScsIChjb21taXQpID0+XG4gICAgICAgICMgY29uc29sZS5sb2cgY29tbWl0XG4gICAgICAgIG1hdHJpeC5hZGRDb21taXQgY29tbWl0XG4gICAgICBpbnB1dC5vbiAnZW5kJywgcmVzb2x2ZVxuXG4gICAgaW5wdXQucmVzdW1lKClcbiAgICBhd2FpdCBlbmRcblxuICAgIG1hdHJpeC5zb3J0KClcbiAgICBodG1sID0gbWF0cml4VG9IdG1sIG1hdHJpeFxuXG4gICAgb3V0cHV0LndyaXRlIGh0bWxcblxuICBvdXRwdXQuZGVzdHJveSgpIGlmIG91dHB1dElzTm90U3Rkb3V0XG4pKCkiXX0=
//# sourceURL=/home/jpreston/Sync/proj/eyeson/src/index.coffee